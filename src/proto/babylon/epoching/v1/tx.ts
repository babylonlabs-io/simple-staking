// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/epoching/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  MsgBeginRedelegate,
  MsgCancelUnbondingDelegation,
  MsgDelegate,
  MsgUndelegate,
} from "../../../cosmos/staking/v1beta1/tx";
import { Params } from "./params";

export const protobufPackage = "babylon.epoching.v1";

/** MsgWrappedDelegate is the message for delegating stakes */
export interface MsgWrappedDelegate {
  msg: MsgDelegate | undefined;
}

/** MsgWrappedDelegate is the response to the MsgWrappedDelegate message */
export interface MsgWrappedDelegateResponse {}

/** MsgWrappedUndelegate is the message for undelegating stakes */
export interface MsgWrappedUndelegate {
  msg: MsgUndelegate | undefined;
}

/**
 * MsgWrappedUndelegateResponse is the response to the MsgWrappedUndelegate
 * message
 */
export interface MsgWrappedUndelegateResponse {}

/**
 * MsgWrappedDelegate is the message for moving bonded stakes from a
 * validator to another validator
 */
export interface MsgWrappedBeginRedelegate {
  msg: MsgBeginRedelegate | undefined;
}

/**
 * MsgWrappedBeginRedelegateResponse is the response to the
 * MsgWrappedBeginRedelegate message
 */
export interface MsgWrappedBeginRedelegateResponse {}

/**
 * MsgWrappedCancelUnbondingDelegation is the message for cancelling
 * an unbonding delegation
 */
export interface MsgWrappedCancelUnbondingDelegation {
  msg: MsgCancelUnbondingDelegation | undefined;
}

/**
 * MsgWrappedCancelUnbondingDelegationResponse is the response to the
 * MsgWrappedCancelUnbondingDelegation message
 */
export interface MsgWrappedCancelUnbondingDelegationResponse {}

/** MsgUpdateParams defines a message for updating epoching module parameters. */
export interface MsgUpdateParams {
  /**
   * authority is the address of the governance account.
   * just FYI: cosmos.AddressString marks that this field should use type alias
   * for AddressString instead of string, but the functionality is not yet implemented
   * in cosmos-proto
   */
  authority: string;
  /**
   * params defines the epoching parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params: Params | undefined;
}

/** MsgUpdateParamsResponse is the response to the MsgUpdateParams message. */
export interface MsgUpdateParamsResponse {}

function createBaseMsgWrappedDelegate(): MsgWrappedDelegate {
  return { msg: undefined };
}

export const MsgWrappedDelegate: MessageFns<MsgWrappedDelegate> = {
  encode(
    message: MsgWrappedDelegate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.msg !== undefined) {
      MsgDelegate.encode(message.msg, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgWrappedDelegate {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWrappedDelegate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.msg = MsgDelegate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgWrappedDelegate {
    return {
      msg: isSet(object.msg) ? MsgDelegate.fromJSON(object.msg) : undefined,
    };
  },

  toJSON(message: MsgWrappedDelegate): unknown {
    const obj: any = {};
    if (message.msg !== undefined) {
      obj.msg = MsgDelegate.toJSON(message.msg);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgWrappedDelegate>, I>>(
    base?: I,
  ): MsgWrappedDelegate {
    return MsgWrappedDelegate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgWrappedDelegate>, I>>(
    object: I,
  ): MsgWrappedDelegate {
    const message = createBaseMsgWrappedDelegate();
    message.msg =
      object.msg !== undefined && object.msg !== null
        ? MsgDelegate.fromPartial(object.msg)
        : undefined;
    return message;
  },
};

function createBaseMsgWrappedDelegateResponse(): MsgWrappedDelegateResponse {
  return {};
}

export const MsgWrappedDelegateResponse: MessageFns<MsgWrappedDelegateResponse> =
  {
    encode(
      _: MsgWrappedDelegateResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MsgWrappedDelegateResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgWrappedDelegateResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): MsgWrappedDelegateResponse {
      return {};
    },

    toJSON(_: MsgWrappedDelegateResponse): unknown {
      const obj: any = {};
      return obj;
    },

    create<I extends Exact<DeepPartial<MsgWrappedDelegateResponse>, I>>(
      base?: I,
    ): MsgWrappedDelegateResponse {
      return MsgWrappedDelegateResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<MsgWrappedDelegateResponse>, I>>(
      _: I,
    ): MsgWrappedDelegateResponse {
      const message = createBaseMsgWrappedDelegateResponse();
      return message;
    },
  };

function createBaseMsgWrappedUndelegate(): MsgWrappedUndelegate {
  return { msg: undefined };
}

export const MsgWrappedUndelegate: MessageFns<MsgWrappedUndelegate> = {
  encode(
    message: MsgWrappedUndelegate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.msg !== undefined) {
      MsgUndelegate.encode(message.msg, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgWrappedUndelegate {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgWrappedUndelegate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.msg = MsgUndelegate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgWrappedUndelegate {
    return {
      msg: isSet(object.msg) ? MsgUndelegate.fromJSON(object.msg) : undefined,
    };
  },

  toJSON(message: MsgWrappedUndelegate): unknown {
    const obj: any = {};
    if (message.msg !== undefined) {
      obj.msg = MsgUndelegate.toJSON(message.msg);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgWrappedUndelegate>, I>>(
    base?: I,
  ): MsgWrappedUndelegate {
    return MsgWrappedUndelegate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgWrappedUndelegate>, I>>(
    object: I,
  ): MsgWrappedUndelegate {
    const message = createBaseMsgWrappedUndelegate();
    message.msg =
      object.msg !== undefined && object.msg !== null
        ? MsgUndelegate.fromPartial(object.msg)
        : undefined;
    return message;
  },
};

function createBaseMsgWrappedUndelegateResponse(): MsgWrappedUndelegateResponse {
  return {};
}

export const MsgWrappedUndelegateResponse: MessageFns<MsgWrappedUndelegateResponse> =
  {
    encode(
      _: MsgWrappedUndelegateResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MsgWrappedUndelegateResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgWrappedUndelegateResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): MsgWrappedUndelegateResponse {
      return {};
    },

    toJSON(_: MsgWrappedUndelegateResponse): unknown {
      const obj: any = {};
      return obj;
    },

    create<I extends Exact<DeepPartial<MsgWrappedUndelegateResponse>, I>>(
      base?: I,
    ): MsgWrappedUndelegateResponse {
      return MsgWrappedUndelegateResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<MsgWrappedUndelegateResponse>, I>>(
      _: I,
    ): MsgWrappedUndelegateResponse {
      const message = createBaseMsgWrappedUndelegateResponse();
      return message;
    },
  };

function createBaseMsgWrappedBeginRedelegate(): MsgWrappedBeginRedelegate {
  return { msg: undefined };
}

export const MsgWrappedBeginRedelegate: MessageFns<MsgWrappedBeginRedelegate> =
  {
    encode(
      message: MsgWrappedBeginRedelegate,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.msg !== undefined) {
        MsgBeginRedelegate.encode(message.msg, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MsgWrappedBeginRedelegate {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgWrappedBeginRedelegate();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.msg = MsgBeginRedelegate.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): MsgWrappedBeginRedelegate {
      return {
        msg: isSet(object.msg)
          ? MsgBeginRedelegate.fromJSON(object.msg)
          : undefined,
      };
    },

    toJSON(message: MsgWrappedBeginRedelegate): unknown {
      const obj: any = {};
      if (message.msg !== undefined) {
        obj.msg = MsgBeginRedelegate.toJSON(message.msg);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<MsgWrappedBeginRedelegate>, I>>(
      base?: I,
    ): MsgWrappedBeginRedelegate {
      return MsgWrappedBeginRedelegate.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<MsgWrappedBeginRedelegate>, I>>(
      object: I,
    ): MsgWrappedBeginRedelegate {
      const message = createBaseMsgWrappedBeginRedelegate();
      message.msg =
        object.msg !== undefined && object.msg !== null
          ? MsgBeginRedelegate.fromPartial(object.msg)
          : undefined;
      return message;
    },
  };

function createBaseMsgWrappedBeginRedelegateResponse(): MsgWrappedBeginRedelegateResponse {
  return {};
}

export const MsgWrappedBeginRedelegateResponse: MessageFns<MsgWrappedBeginRedelegateResponse> =
  {
    encode(
      _: MsgWrappedBeginRedelegateResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MsgWrappedBeginRedelegateResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgWrappedBeginRedelegateResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): MsgWrappedBeginRedelegateResponse {
      return {};
    },

    toJSON(_: MsgWrappedBeginRedelegateResponse): unknown {
      const obj: any = {};
      return obj;
    },

    create<I extends Exact<DeepPartial<MsgWrappedBeginRedelegateResponse>, I>>(
      base?: I,
    ): MsgWrappedBeginRedelegateResponse {
      return MsgWrappedBeginRedelegateResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<MsgWrappedBeginRedelegateResponse>, I>,
    >(_: I): MsgWrappedBeginRedelegateResponse {
      const message = createBaseMsgWrappedBeginRedelegateResponse();
      return message;
    },
  };

function createBaseMsgWrappedCancelUnbondingDelegation(): MsgWrappedCancelUnbondingDelegation {
  return { msg: undefined };
}

export const MsgWrappedCancelUnbondingDelegation: MessageFns<MsgWrappedCancelUnbondingDelegation> =
  {
    encode(
      message: MsgWrappedCancelUnbondingDelegation,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.msg !== undefined) {
        MsgCancelUnbondingDelegation.encode(
          message.msg,
          writer.uint32(10).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MsgWrappedCancelUnbondingDelegation {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgWrappedCancelUnbondingDelegation();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.msg = MsgCancelUnbondingDelegation.decode(
              reader,
              reader.uint32(),
            );
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): MsgWrappedCancelUnbondingDelegation {
      return {
        msg: isSet(object.msg)
          ? MsgCancelUnbondingDelegation.fromJSON(object.msg)
          : undefined,
      };
    },

    toJSON(message: MsgWrappedCancelUnbondingDelegation): unknown {
      const obj: any = {};
      if (message.msg !== undefined) {
        obj.msg = MsgCancelUnbondingDelegation.toJSON(message.msg);
      }
      return obj;
    },

    create<
      I extends Exact<DeepPartial<MsgWrappedCancelUnbondingDelegation>, I>,
    >(base?: I): MsgWrappedCancelUnbondingDelegation {
      return MsgWrappedCancelUnbondingDelegation.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<DeepPartial<MsgWrappedCancelUnbondingDelegation>, I>,
    >(object: I): MsgWrappedCancelUnbondingDelegation {
      const message = createBaseMsgWrappedCancelUnbondingDelegation();
      message.msg =
        object.msg !== undefined && object.msg !== null
          ? MsgCancelUnbondingDelegation.fromPartial(object.msg)
          : undefined;
      return message;
    },
  };

function createBaseMsgWrappedCancelUnbondingDelegationResponse(): MsgWrappedCancelUnbondingDelegationResponse {
  return {};
}

export const MsgWrappedCancelUnbondingDelegationResponse: MessageFns<MsgWrappedCancelUnbondingDelegationResponse> =
  {
    encode(
      _: MsgWrappedCancelUnbondingDelegationResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MsgWrappedCancelUnbondingDelegationResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgWrappedCancelUnbondingDelegationResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): MsgWrappedCancelUnbondingDelegationResponse {
      return {};
    },

    toJSON(_: MsgWrappedCancelUnbondingDelegationResponse): unknown {
      const obj: any = {};
      return obj;
    },

    create<
      I extends Exact<
        DeepPartial<MsgWrappedCancelUnbondingDelegationResponse>,
        I
      >,
    >(base?: I): MsgWrappedCancelUnbondingDelegationResponse {
      return MsgWrappedCancelUnbondingDelegationResponse.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<
        DeepPartial<MsgWrappedCancelUnbondingDelegationResponse>,
        I
      >,
    >(_: I): MsgWrappedCancelUnbondingDelegationResponse {
      const message = createBaseMsgWrappedCancelUnbondingDelegationResponse();
      return message;
    },
  };

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(
    message: MsgUpdateParams,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority)
        ? globalThis.String(object.authority)
        : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(
    base?: I,
  ): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(
    object: I,
  ): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params =
      object.params !== undefined && object.params !== null
        ? Params.fromPartial(object.params)
        : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(
    _: MsgUpdateParamsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgUpdateParamsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(
    base?: I,
  ): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(
    _: I,
  ): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

/** Msg defines the Msg service. */
export interface Msg {
  /**
   * WrappedDelegate defines a method for performing a delegation of coins from
   * a delegator to a validator.
   */
  WrappedDelegate(
    request: MsgWrappedDelegate,
  ): Promise<MsgWrappedDelegateResponse>;
  /**
   * WrappedUndelegate defines a method for performing an undelegation from a
   * delegate and a validator.
   */
  WrappedUndelegate(
    request: MsgWrappedUndelegate,
  ): Promise<MsgWrappedUndelegateResponse>;
  /**
   * WrappedBeginRedelegate defines a method for performing a redelegation of
   * coins from a delegator and source validator to a destination validator.
   */
  WrappedBeginRedelegate(
    request: MsgWrappedBeginRedelegate,
  ): Promise<MsgWrappedBeginRedelegateResponse>;
  /**
   * WrappedCancelUnbondingDelegation defines a method for cancelling unbonding of
   * coins from a delegator and source validator to a destination validator.
   */
  WrappedCancelUnbondingDelegation(
    request: MsgWrappedCancelUnbondingDelegation,
  ): Promise<MsgWrappedCancelUnbondingDelegationResponse>;
  /** UpdateParams defines a method for updating epoching module parameters. */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
}

export const MsgServiceName = "babylon.epoching.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.WrappedDelegate = this.WrappedDelegate.bind(this);
    this.WrappedUndelegate = this.WrappedUndelegate.bind(this);
    this.WrappedBeginRedelegate = this.WrappedBeginRedelegate.bind(this);
    this.WrappedCancelUnbondingDelegation =
      this.WrappedCancelUnbondingDelegation.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
  }
  WrappedDelegate(
    request: MsgWrappedDelegate,
  ): Promise<MsgWrappedDelegateResponse> {
    const data = MsgWrappedDelegate.encode(request).finish();
    const promise = this.rpc.request(this.service, "WrappedDelegate", data);
    return promise.then((data) =>
      MsgWrappedDelegateResponse.decode(new BinaryReader(data)),
    );
  }

  WrappedUndelegate(
    request: MsgWrappedUndelegate,
  ): Promise<MsgWrappedUndelegateResponse> {
    const data = MsgWrappedUndelegate.encode(request).finish();
    const promise = this.rpc.request(this.service, "WrappedUndelegate", data);
    return promise.then((data) =>
      MsgWrappedUndelegateResponse.decode(new BinaryReader(data)),
    );
  }

  WrappedBeginRedelegate(
    request: MsgWrappedBeginRedelegate,
  ): Promise<MsgWrappedBeginRedelegateResponse> {
    const data = MsgWrappedBeginRedelegate.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "WrappedBeginRedelegate",
      data,
    );
    return promise.then((data) =>
      MsgWrappedBeginRedelegateResponse.decode(new BinaryReader(data)),
    );
  }

  WrappedCancelUnbondingDelegation(
    request: MsgWrappedCancelUnbondingDelegation,
  ): Promise<MsgWrappedCancelUnbondingDelegationResponse> {
    const data = MsgWrappedCancelUnbondingDelegation.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "WrappedCancelUnbondingDelegation",
      data,
    );
    return promise.then((data) =>
      MsgWrappedCancelUnbondingDelegationResponse.decode(
        new BinaryReader(data),
      ),
    );
  }

  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) =>
      MsgUpdateParamsResponse.decode(new BinaryReader(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
