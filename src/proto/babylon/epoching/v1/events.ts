// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/epoching/v1/events.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "babylon.epoching.v1";

/** EventBeginEpoch is the event emitted when an epoch has started */
export interface EventBeginEpoch {
  epochNumber: number;
}

/** EventEndEpoch is the event emitted when an epoch has ended */
export interface EventEndEpoch {
  epochNumber: number;
}

/**
 * EventHandleQueuedMsg is the event emitted when a queued message has been
 * handled
 */
export interface EventHandleQueuedMsg {
  originalEventType: string;
  epochNumber: number;
  height: number;
  txId: Uint8Array;
  msgId: Uint8Array;
  originalAttributes: Uint8Array[];
  error: string;
}

/**
 * EventSlashThreshold is the event emitted when a set of validators have been
 * slashed
 */
export interface EventSlashThreshold {
  slashedVotingPower: number;
  totalVotingPower: number;
  slashedValidators: Uint8Array[];
}

/**
 * EventWrappedDelegate is the event emitted when a MsgWrappedDelegate has been
 * queued
 */
export interface EventWrappedDelegate {
  delegatorAddress: string;
  validatorAddress: string;
  amount: number;
  denom: string;
  epochBoundary: number;
}

/**
 * EventWrappedUndelegate is the event emitted when a MsgWrappedUndelegate has
 * been queued
 */
export interface EventWrappedUndelegate {
  delegatorAddress: string;
  validatorAddress: string;
  amount: number;
  denom: string;
  epochBoundary: number;
}

/**
 * EventWrappedBeginRedelegate is the event emitted when a
 * MsgWrappedBeginRedelegate has been queued
 */
export interface EventWrappedBeginRedelegate {
  delegatorAddress: string;
  sourceValidatorAddress: string;
  destinationValidatorAddress: string;
  amount: number;
  denom: string;
  epochBoundary: number;
}

/**
 * EventWrappedCancelUnbondingDelegation is the event emitted when a
 * MsgWrappedCancelUnbondingDelegation has been queued
 */
export interface EventWrappedCancelUnbondingDelegation {
  delegatorAddress: string;
  validatorAddress: string;
  amount: number;
  creationHeight: number;
  epochBoundary: number;
}

function createBaseEventBeginEpoch(): EventBeginEpoch {
  return { epochNumber: 0 };
}

export const EventBeginEpoch: MessageFns<EventBeginEpoch> = {
  encode(
    message: EventBeginEpoch,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.epochNumber !== 0) {
      writer.uint32(8).uint64(message.epochNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventBeginEpoch {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventBeginEpoch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventBeginEpoch {
    return {
      epochNumber: isSet(object.epochNumber)
        ? globalThis.Number(object.epochNumber)
        : 0,
    };
  },

  toJSON(message: EventBeginEpoch): unknown {
    const obj: any = {};
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventBeginEpoch>, I>>(
    base?: I,
  ): EventBeginEpoch {
    return EventBeginEpoch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventBeginEpoch>, I>>(
    object: I,
  ): EventBeginEpoch {
    const message = createBaseEventBeginEpoch();
    message.epochNumber = object.epochNumber ?? 0;
    return message;
  },
};

function createBaseEventEndEpoch(): EventEndEpoch {
  return { epochNumber: 0 };
}

export const EventEndEpoch: MessageFns<EventEndEpoch> = {
  encode(
    message: EventEndEpoch,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.epochNumber !== 0) {
      writer.uint32(8).uint64(message.epochNumber);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventEndEpoch {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventEndEpoch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventEndEpoch {
    return {
      epochNumber: isSet(object.epochNumber)
        ? globalThis.Number(object.epochNumber)
        : 0,
    };
  },

  toJSON(message: EventEndEpoch): unknown {
    const obj: any = {};
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventEndEpoch>, I>>(
    base?: I,
  ): EventEndEpoch {
    return EventEndEpoch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventEndEpoch>, I>>(
    object: I,
  ): EventEndEpoch {
    const message = createBaseEventEndEpoch();
    message.epochNumber = object.epochNumber ?? 0;
    return message;
  },
};

function createBaseEventHandleQueuedMsg(): EventHandleQueuedMsg {
  return {
    originalEventType: "",
    epochNumber: 0,
    height: 0,
    txId: new Uint8Array(0),
    msgId: new Uint8Array(0),
    originalAttributes: [],
    error: "",
  };
}

export const EventHandleQueuedMsg: MessageFns<EventHandleQueuedMsg> = {
  encode(
    message: EventHandleQueuedMsg,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.originalEventType !== "") {
      writer.uint32(10).string(message.originalEventType);
    }
    if (message.epochNumber !== 0) {
      writer.uint32(16).uint64(message.epochNumber);
    }
    if (message.height !== 0) {
      writer.uint32(24).uint64(message.height);
    }
    if (message.txId.length !== 0) {
      writer.uint32(34).bytes(message.txId);
    }
    if (message.msgId.length !== 0) {
      writer.uint32(42).bytes(message.msgId);
    }
    for (const v of message.originalAttributes) {
      writer.uint32(50).bytes(v!);
    }
    if (message.error !== "") {
      writer.uint32(58).string(message.error);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): EventHandleQueuedMsg {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventHandleQueuedMsg();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.originalEventType = reader.string();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.msgId = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.originalAttributes.push(reader.bytes());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.error = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventHandleQueuedMsg {
    return {
      originalEventType: isSet(object.originalEventType)
        ? globalThis.String(object.originalEventType)
        : "",
      epochNumber: isSet(object.epochNumber)
        ? globalThis.Number(object.epochNumber)
        : 0,
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      txId: isSet(object.txId)
        ? bytesFromBase64(object.txId)
        : new Uint8Array(0),
      msgId: isSet(object.msgId)
        ? bytesFromBase64(object.msgId)
        : new Uint8Array(0),
      originalAttributes: globalThis.Array.isArray(object?.originalAttributes)
        ? object.originalAttributes.map((e: any) => bytesFromBase64(e))
        : [],
      error: isSet(object.error) ? globalThis.String(object.error) : "",
    };
  },

  toJSON(message: EventHandleQueuedMsg): unknown {
    const obj: any = {};
    if (message.originalEventType !== "") {
      obj.originalEventType = message.originalEventType;
    }
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.msgId.length !== 0) {
      obj.msgId = base64FromBytes(message.msgId);
    }
    if (message.originalAttributes?.length) {
      obj.originalAttributes = message.originalAttributes.map((e) =>
        base64FromBytes(e),
      );
    }
    if (message.error !== "") {
      obj.error = message.error;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventHandleQueuedMsg>, I>>(
    base?: I,
  ): EventHandleQueuedMsg {
    return EventHandleQueuedMsg.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventHandleQueuedMsg>, I>>(
    object: I,
  ): EventHandleQueuedMsg {
    const message = createBaseEventHandleQueuedMsg();
    message.originalEventType = object.originalEventType ?? "";
    message.epochNumber = object.epochNumber ?? 0;
    message.height = object.height ?? 0;
    message.txId = object.txId ?? new Uint8Array(0);
    message.msgId = object.msgId ?? new Uint8Array(0);
    message.originalAttributes = object.originalAttributes?.map((e) => e) || [];
    message.error = object.error ?? "";
    return message;
  },
};

function createBaseEventSlashThreshold(): EventSlashThreshold {
  return { slashedVotingPower: 0, totalVotingPower: 0, slashedValidators: [] };
}

export const EventSlashThreshold: MessageFns<EventSlashThreshold> = {
  encode(
    message: EventSlashThreshold,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.slashedVotingPower !== 0) {
      writer.uint32(8).int64(message.slashedVotingPower);
    }
    if (message.totalVotingPower !== 0) {
      writer.uint32(16).int64(message.totalVotingPower);
    }
    for (const v of message.slashedValidators) {
      writer.uint32(26).bytes(v!);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): EventSlashThreshold {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventSlashThreshold();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.slashedVotingPower = longToNumber(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.totalVotingPower = longToNumber(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.slashedValidators.push(reader.bytes());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventSlashThreshold {
    return {
      slashedVotingPower: isSet(object.slashedVotingPower)
        ? globalThis.Number(object.slashedVotingPower)
        : 0,
      totalVotingPower: isSet(object.totalVotingPower)
        ? globalThis.Number(object.totalVotingPower)
        : 0,
      slashedValidators: globalThis.Array.isArray(object?.slashedValidators)
        ? object.slashedValidators.map((e: any) => bytesFromBase64(e))
        : [],
    };
  },

  toJSON(message: EventSlashThreshold): unknown {
    const obj: any = {};
    if (message.slashedVotingPower !== 0) {
      obj.slashedVotingPower = Math.round(message.slashedVotingPower);
    }
    if (message.totalVotingPower !== 0) {
      obj.totalVotingPower = Math.round(message.totalVotingPower);
    }
    if (message.slashedValidators?.length) {
      obj.slashedValidators = message.slashedValidators.map((e) =>
        base64FromBytes(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventSlashThreshold>, I>>(
    base?: I,
  ): EventSlashThreshold {
    return EventSlashThreshold.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventSlashThreshold>, I>>(
    object: I,
  ): EventSlashThreshold {
    const message = createBaseEventSlashThreshold();
    message.slashedVotingPower = object.slashedVotingPower ?? 0;
    message.totalVotingPower = object.totalVotingPower ?? 0;
    message.slashedValidators = object.slashedValidators?.map((e) => e) || [];
    return message;
  },
};

function createBaseEventWrappedDelegate(): EventWrappedDelegate {
  return {
    delegatorAddress: "",
    validatorAddress: "",
    amount: 0,
    denom: "",
    epochBoundary: 0,
  };
}

export const EventWrappedDelegate: MessageFns<EventWrappedDelegate> = {
  encode(
    message: EventWrappedDelegate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(18).string(message.validatorAddress);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    if (message.denom !== "") {
      writer.uint32(34).string(message.denom);
    }
    if (message.epochBoundary !== 0) {
      writer.uint32(40).uint64(message.epochBoundary);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): EventWrappedDelegate {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventWrappedDelegate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.epochBoundary = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventWrappedDelegate {
    return {
      delegatorAddress: isSet(object.delegatorAddress)
        ? globalThis.String(object.delegatorAddress)
        : "",
      validatorAddress: isSet(object.validatorAddress)
        ? globalThis.String(object.validatorAddress)
        : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      epochBoundary: isSet(object.epochBoundary)
        ? globalThis.Number(object.epochBoundary)
        : 0,
    };
  },

  toJSON(message: EventWrappedDelegate): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.epochBoundary !== 0) {
      obj.epochBoundary = Math.round(message.epochBoundary);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventWrappedDelegate>, I>>(
    base?: I,
  ): EventWrappedDelegate {
    return EventWrappedDelegate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventWrappedDelegate>, I>>(
    object: I,
  ): EventWrappedDelegate {
    const message = createBaseEventWrappedDelegate();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.validatorAddress = object.validatorAddress ?? "";
    message.amount = object.amount ?? 0;
    message.denom = object.denom ?? "";
    message.epochBoundary = object.epochBoundary ?? 0;
    return message;
  },
};

function createBaseEventWrappedUndelegate(): EventWrappedUndelegate {
  return {
    delegatorAddress: "",
    validatorAddress: "",
    amount: 0,
    denom: "",
    epochBoundary: 0,
  };
}

export const EventWrappedUndelegate: MessageFns<EventWrappedUndelegate> = {
  encode(
    message: EventWrappedUndelegate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.delegatorAddress !== "") {
      writer.uint32(10).string(message.delegatorAddress);
    }
    if (message.validatorAddress !== "") {
      writer.uint32(18).string(message.validatorAddress);
    }
    if (message.amount !== 0) {
      writer.uint32(24).uint64(message.amount);
    }
    if (message.denom !== "") {
      writer.uint32(34).string(message.denom);
    }
    if (message.epochBoundary !== 0) {
      writer.uint32(40).uint64(message.epochBoundary);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): EventWrappedUndelegate {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventWrappedUndelegate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.delegatorAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.amount = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.denom = reader.string();
          continue;
        case 5:
          if (tag !== 40) {
            break;
          }

          message.epochBoundary = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventWrappedUndelegate {
    return {
      delegatorAddress: isSet(object.delegatorAddress)
        ? globalThis.String(object.delegatorAddress)
        : "",
      validatorAddress: isSet(object.validatorAddress)
        ? globalThis.String(object.validatorAddress)
        : "",
      amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
      denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
      epochBoundary: isSet(object.epochBoundary)
        ? globalThis.Number(object.epochBoundary)
        : 0,
    };
  },

  toJSON(message: EventWrappedUndelegate): unknown {
    const obj: any = {};
    if (message.delegatorAddress !== "") {
      obj.delegatorAddress = message.delegatorAddress;
    }
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    if (message.amount !== 0) {
      obj.amount = Math.round(message.amount);
    }
    if (message.denom !== "") {
      obj.denom = message.denom;
    }
    if (message.epochBoundary !== 0) {
      obj.epochBoundary = Math.round(message.epochBoundary);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventWrappedUndelegate>, I>>(
    base?: I,
  ): EventWrappedUndelegate {
    return EventWrappedUndelegate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventWrappedUndelegate>, I>>(
    object: I,
  ): EventWrappedUndelegate {
    const message = createBaseEventWrappedUndelegate();
    message.delegatorAddress = object.delegatorAddress ?? "";
    message.validatorAddress = object.validatorAddress ?? "";
    message.amount = object.amount ?? 0;
    message.denom = object.denom ?? "";
    message.epochBoundary = object.epochBoundary ?? 0;
    return message;
  },
};

function createBaseEventWrappedBeginRedelegate(): EventWrappedBeginRedelegate {
  return {
    delegatorAddress: "",
    sourceValidatorAddress: "",
    destinationValidatorAddress: "",
    amount: 0,
    denom: "",
    epochBoundary: 0,
  };
}

export const EventWrappedBeginRedelegate: MessageFns<EventWrappedBeginRedelegate> =
  {
    encode(
      message: EventWrappedBeginRedelegate,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.delegatorAddress !== "") {
        writer.uint32(10).string(message.delegatorAddress);
      }
      if (message.sourceValidatorAddress !== "") {
        writer.uint32(18).string(message.sourceValidatorAddress);
      }
      if (message.destinationValidatorAddress !== "") {
        writer.uint32(26).string(message.destinationValidatorAddress);
      }
      if (message.amount !== 0) {
        writer.uint32(32).uint64(message.amount);
      }
      if (message.denom !== "") {
        writer.uint32(42).string(message.denom);
      }
      if (message.epochBoundary !== 0) {
        writer.uint32(48).uint64(message.epochBoundary);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): EventWrappedBeginRedelegate {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseEventWrappedBeginRedelegate();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.delegatorAddress = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.sourceValidatorAddress = reader.string();
            continue;
          case 3:
            if (tag !== 26) {
              break;
            }

            message.destinationValidatorAddress = reader.string();
            continue;
          case 4:
            if (tag !== 32) {
              break;
            }

            message.amount = longToNumber(reader.uint64());
            continue;
          case 5:
            if (tag !== 42) {
              break;
            }

            message.denom = reader.string();
            continue;
          case 6:
            if (tag !== 48) {
              break;
            }

            message.epochBoundary = longToNumber(reader.uint64());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): EventWrappedBeginRedelegate {
      return {
        delegatorAddress: isSet(object.delegatorAddress)
          ? globalThis.String(object.delegatorAddress)
          : "",
        sourceValidatorAddress: isSet(object.sourceValidatorAddress)
          ? globalThis.String(object.sourceValidatorAddress)
          : "",
        destinationValidatorAddress: isSet(object.destinationValidatorAddress)
          ? globalThis.String(object.destinationValidatorAddress)
          : "",
        amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
        denom: isSet(object.denom) ? globalThis.String(object.denom) : "",
        epochBoundary: isSet(object.epochBoundary)
          ? globalThis.Number(object.epochBoundary)
          : 0,
      };
    },

    toJSON(message: EventWrappedBeginRedelegate): unknown {
      const obj: any = {};
      if (message.delegatorAddress !== "") {
        obj.delegatorAddress = message.delegatorAddress;
      }
      if (message.sourceValidatorAddress !== "") {
        obj.sourceValidatorAddress = message.sourceValidatorAddress;
      }
      if (message.destinationValidatorAddress !== "") {
        obj.destinationValidatorAddress = message.destinationValidatorAddress;
      }
      if (message.amount !== 0) {
        obj.amount = Math.round(message.amount);
      }
      if (message.denom !== "") {
        obj.denom = message.denom;
      }
      if (message.epochBoundary !== 0) {
        obj.epochBoundary = Math.round(message.epochBoundary);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<EventWrappedBeginRedelegate>, I>>(
      base?: I,
    ): EventWrappedBeginRedelegate {
      return EventWrappedBeginRedelegate.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<EventWrappedBeginRedelegate>, I>>(
      object: I,
    ): EventWrappedBeginRedelegate {
      const message = createBaseEventWrappedBeginRedelegate();
      message.delegatorAddress = object.delegatorAddress ?? "";
      message.sourceValidatorAddress = object.sourceValidatorAddress ?? "";
      message.destinationValidatorAddress =
        object.destinationValidatorAddress ?? "";
      message.amount = object.amount ?? 0;
      message.denom = object.denom ?? "";
      message.epochBoundary = object.epochBoundary ?? 0;
      return message;
    },
  };

function createBaseEventWrappedCancelUnbondingDelegation(): EventWrappedCancelUnbondingDelegation {
  return {
    delegatorAddress: "",
    validatorAddress: "",
    amount: 0,
    creationHeight: 0,
    epochBoundary: 0,
  };
}

export const EventWrappedCancelUnbondingDelegation: MessageFns<EventWrappedCancelUnbondingDelegation> =
  {
    encode(
      message: EventWrappedCancelUnbondingDelegation,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.delegatorAddress !== "") {
        writer.uint32(10).string(message.delegatorAddress);
      }
      if (message.validatorAddress !== "") {
        writer.uint32(18).string(message.validatorAddress);
      }
      if (message.amount !== 0) {
        writer.uint32(24).uint64(message.amount);
      }
      if (message.creationHeight !== 0) {
        writer.uint32(32).int64(message.creationHeight);
      }
      if (message.epochBoundary !== 0) {
        writer.uint32(40).uint64(message.epochBoundary);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): EventWrappedCancelUnbondingDelegation {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseEventWrappedCancelUnbondingDelegation();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.delegatorAddress = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.validatorAddress = reader.string();
            continue;
          case 3:
            if (tag !== 24) {
              break;
            }

            message.amount = longToNumber(reader.uint64());
            continue;
          case 4:
            if (tag !== 32) {
              break;
            }

            message.creationHeight = longToNumber(reader.int64());
            continue;
          case 5:
            if (tag !== 40) {
              break;
            }

            message.epochBoundary = longToNumber(reader.uint64());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): EventWrappedCancelUnbondingDelegation {
      return {
        delegatorAddress: isSet(object.delegatorAddress)
          ? globalThis.String(object.delegatorAddress)
          : "",
        validatorAddress: isSet(object.validatorAddress)
          ? globalThis.String(object.validatorAddress)
          : "",
        amount: isSet(object.amount) ? globalThis.Number(object.amount) : 0,
        creationHeight: isSet(object.creationHeight)
          ? globalThis.Number(object.creationHeight)
          : 0,
        epochBoundary: isSet(object.epochBoundary)
          ? globalThis.Number(object.epochBoundary)
          : 0,
      };
    },

    toJSON(message: EventWrappedCancelUnbondingDelegation): unknown {
      const obj: any = {};
      if (message.delegatorAddress !== "") {
        obj.delegatorAddress = message.delegatorAddress;
      }
      if (message.validatorAddress !== "") {
        obj.validatorAddress = message.validatorAddress;
      }
      if (message.amount !== 0) {
        obj.amount = Math.round(message.amount);
      }
      if (message.creationHeight !== 0) {
        obj.creationHeight = Math.round(message.creationHeight);
      }
      if (message.epochBoundary !== 0) {
        obj.epochBoundary = Math.round(message.epochBoundary);
      }
      return obj;
    },

    create<
      I extends Exact<DeepPartial<EventWrappedCancelUnbondingDelegation>, I>,
    >(base?: I): EventWrappedCancelUnbondingDelegation {
      return EventWrappedCancelUnbondingDelegation.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<DeepPartial<EventWrappedCancelUnbondingDelegation>, I>,
    >(object: I): EventWrappedCancelUnbondingDelegation {
      const message = createBaseEventWrappedCancelUnbondingDelegation();
      message.delegatorAddress = object.delegatorAddress ?? "";
      message.validatorAddress = object.validatorAddress ?? "";
      message.amount = object.amount ?? 0;
      message.creationHeight = object.creationHeight ?? 0;
      message.epochBoundary = object.epochBoundary ?? 0;
      return message;
    },
  };

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
