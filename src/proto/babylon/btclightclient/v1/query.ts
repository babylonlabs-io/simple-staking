// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/btclightclient/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  PageRequest,
  PageResponse,
} from "../../../cosmos/base/query/v1beta1/pagination";
import { Params } from "./params";

export const protobufPackage = "babylon.btclightclient.v1";

/** QueryParamsRequest is the request type for the Query/Params RPC method. */
export interface QueryParamsRequest {}

/** QueryParamsResponse is the response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

/**
 * QueryHashesRequest is request type for the Query/Hashes RPC method.
 * It involves retrieving all hashes that are maintained by the module.
 */
export interface QueryHashesRequest {
  pagination: PageRequest | undefined;
}

/** QueryHashesResponse is response type for the Query/Hashes RPC method. */
export interface QueryHashesResponse {
  hashes: Uint8Array[];
  pagination: PageResponse | undefined;
}

/**
 * QueryContainsRequest is request type for the Query/Contains RPC method.
 * It involves checking whether a hash is maintained by the module.
 */
export interface QueryContainsRequest {
  hash: Uint8Array;
}

/** QueryContainsResponse is response type for the Query/Contains RPC method. */
export interface QueryContainsResponse {
  contains: boolean;
}

/**
 * QueryContainsRequest is request type for the temporary Query/ContainsBytes
 * RPC method. It involves checking whether a hash is maintained by the module.
 */
export interface QueryContainsBytesRequest {
  hash: Uint8Array;
}

/**
 * QueryContainsResponse is response type for the temporary Query/ContainsBytes
 * RPC method.
 */
export interface QueryContainsBytesResponse {
  contains: boolean;
}

/**
 * QueryMainChainRequest is request type for the Query/MainChain RPC method.
 * It involves retrieving the canonical chain maintained by the module.
 */
export interface QueryMainChainRequest {
  pagination: PageRequest | undefined;
}

/** QueryMainChainResponse is response type for the Query/MainChain RPC method. */
export interface QueryMainChainResponse {
  headers: BTCHeaderInfoResponse[];
  pagination: PageResponse | undefined;
}

/** QueryTipRequest is the request type for the Query/Tip RPC method. */
export interface QueryTipRequest {}

/** QueryTipResponse is the response type for the Query/Tip RPC method. */
export interface QueryTipResponse {
  header: BTCHeaderInfoResponse | undefined;
}

/**
 * QueryBaseHeaderRequest is the request type for the Query/BaseHeader RPC
 * method.
 */
export interface QueryBaseHeaderRequest {}

/**
 * QueryBaseHeaderResponse is the response type for the Query/BaseHeader RPC
 * method.
 */
export interface QueryBaseHeaderResponse {
  header: BTCHeaderInfoResponse | undefined;
}

/**
 * QueryMainChainDepthRequest is the request type for the Query/MainChainDepth RPC
 * it contains hex encoded hash of btc block header as parameter
 */
export interface QueryHeaderDepthRequest {
  hash: string;
}

/**
 * QueryMainChainDepthResponse is the response type for the Query/MainChainDepth RPC
 * it contains depth of the block in main chain
 */
export interface QueryHeaderDepthResponse {
  depth: number;
}

/**
 * BTCHeaderInfoResponse is a structure that contains all relevant information about a
 * BTC header response
 *  - Full header as string hex.
 *  - Header hash for easy retrieval as string hex.
 *  - Height of the header in the BTC chain.
 *  - Total work spent on the header. This is the sum of the work corresponding
 *  to the header Bits field
 *    and the total work of the header.
 */
export interface BTCHeaderInfoResponse {
  headerHex: string;
  hashHex: string;
  height: number;
  /** Work is the sdkmath.Uint as string. */
  work: string;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(
    _: QueryParamsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryParamsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(
    base?: I,
  ): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(
    _: I,
  ): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(
    message: QueryParamsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryParamsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(
    base?: I,
  ): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(
    object: I,
  ): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params =
      object.params !== undefined && object.params !== null
        ? Params.fromPartial(object.params)
        : undefined;
    return message;
  },
};

function createBaseQueryHashesRequest(): QueryHashesRequest {
  return { pagination: undefined };
}

export const QueryHashesRequest: MessageFns<QueryHashesRequest> = {
  encode(
    message: QueryHashesRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryHashesRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryHashesRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryHashesRequest {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryHashesRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryHashesRequest>, I>>(
    base?: I,
  ): QueryHashesRequest {
    return QueryHashesRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryHashesRequest>, I>>(
    object: I,
  ): QueryHashesRequest {
    const message = createBaseQueryHashesRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryHashesResponse(): QueryHashesResponse {
  return { hashes: [], pagination: undefined };
}

export const QueryHashesResponse: MessageFns<QueryHashesResponse> = {
  encode(
    message: QueryHashesResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.hashes) {
      writer.uint32(10).bytes(v!);
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryHashesResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryHashesResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hashes.push(reader.bytes());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryHashesResponse {
    return {
      hashes: globalThis.Array.isArray(object?.hashes)
        ? object.hashes.map((e: any) => bytesFromBase64(e))
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryHashesResponse): unknown {
    const obj: any = {};
    if (message.hashes?.length) {
      obj.hashes = message.hashes.map((e) => base64FromBytes(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryHashesResponse>, I>>(
    base?: I,
  ): QueryHashesResponse {
    return QueryHashesResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryHashesResponse>, I>>(
    object: I,
  ): QueryHashesResponse {
    const message = createBaseQueryHashesResponse();
    message.hashes = object.hashes?.map((e) => e) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryContainsRequest(): QueryContainsRequest {
  return { hash: new Uint8Array(0) };
}

export const QueryContainsRequest: MessageFns<QueryContainsRequest> = {
  encode(
    message: QueryContainsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.hash.length !== 0) {
      writer.uint32(10).bytes(message.hash);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryContainsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContainsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContainsRequest {
    return {
      hash: isSet(object.hash)
        ? bytesFromBase64(object.hash)
        : new Uint8Array(0),
    };
  },

  toJSON(message: QueryContainsRequest): unknown {
    const obj: any = {};
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryContainsRequest>, I>>(
    base?: I,
  ): QueryContainsRequest {
    return QueryContainsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryContainsRequest>, I>>(
    object: I,
  ): QueryContainsRequest {
    const message = createBaseQueryContainsRequest();
    message.hash = object.hash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryContainsResponse(): QueryContainsResponse {
  return { contains: false };
}

export const QueryContainsResponse: MessageFns<QueryContainsResponse> = {
  encode(
    message: QueryContainsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.contains !== false) {
      writer.uint32(8).bool(message.contains);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryContainsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryContainsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.contains = reader.bool();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryContainsResponse {
    return {
      contains: isSet(object.contains)
        ? globalThis.Boolean(object.contains)
        : false,
    };
  },

  toJSON(message: QueryContainsResponse): unknown {
    const obj: any = {};
    if (message.contains !== false) {
      obj.contains = message.contains;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryContainsResponse>, I>>(
    base?: I,
  ): QueryContainsResponse {
    return QueryContainsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryContainsResponse>, I>>(
    object: I,
  ): QueryContainsResponse {
    const message = createBaseQueryContainsResponse();
    message.contains = object.contains ?? false;
    return message;
  },
};

function createBaseQueryContainsBytesRequest(): QueryContainsBytesRequest {
  return { hash: new Uint8Array(0) };
}

export const QueryContainsBytesRequest: MessageFns<QueryContainsBytesRequest> =
  {
    encode(
      message: QueryContainsBytesRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.hash.length !== 0) {
        writer.uint32(10).bytes(message.hash);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryContainsBytesRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryContainsBytesRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.hash = reader.bytes();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryContainsBytesRequest {
      return {
        hash: isSet(object.hash)
          ? bytesFromBase64(object.hash)
          : new Uint8Array(0),
      };
    },

    toJSON(message: QueryContainsBytesRequest): unknown {
      const obj: any = {};
      if (message.hash.length !== 0) {
        obj.hash = base64FromBytes(message.hash);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryContainsBytesRequest>, I>>(
      base?: I,
    ): QueryContainsBytesRequest {
      return QueryContainsBytesRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryContainsBytesRequest>, I>>(
      object: I,
    ): QueryContainsBytesRequest {
      const message = createBaseQueryContainsBytesRequest();
      message.hash = object.hash ?? new Uint8Array(0);
      return message;
    },
  };

function createBaseQueryContainsBytesResponse(): QueryContainsBytesResponse {
  return { contains: false };
}

export const QueryContainsBytesResponse: MessageFns<QueryContainsBytesResponse> =
  {
    encode(
      message: QueryContainsBytesResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.contains !== false) {
        writer.uint32(8).bool(message.contains);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryContainsBytesResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryContainsBytesResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.contains = reader.bool();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryContainsBytesResponse {
      return {
        contains: isSet(object.contains)
          ? globalThis.Boolean(object.contains)
          : false,
      };
    },

    toJSON(message: QueryContainsBytesResponse): unknown {
      const obj: any = {};
      if (message.contains !== false) {
        obj.contains = message.contains;
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryContainsBytesResponse>, I>>(
      base?: I,
    ): QueryContainsBytesResponse {
      return QueryContainsBytesResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryContainsBytesResponse>, I>>(
      object: I,
    ): QueryContainsBytesResponse {
      const message = createBaseQueryContainsBytesResponse();
      message.contains = object.contains ?? false;
      return message;
    },
  };

function createBaseQueryMainChainRequest(): QueryMainChainRequest {
  return { pagination: undefined };
}

export const QueryMainChainRequest: MessageFns<QueryMainChainRequest> = {
  encode(
    message: QueryMainChainRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryMainChainRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMainChainRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMainChainRequest {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryMainChainRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMainChainRequest>, I>>(
    base?: I,
  ): QueryMainChainRequest {
    return QueryMainChainRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMainChainRequest>, I>>(
    object: I,
  ): QueryMainChainRequest {
    const message = createBaseQueryMainChainRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryMainChainResponse(): QueryMainChainResponse {
  return { headers: [], pagination: undefined };
}

export const QueryMainChainResponse: MessageFns<QueryMainChainResponse> = {
  encode(
    message: QueryMainChainResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.headers) {
      BTCHeaderInfoResponse.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryMainChainResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryMainChainResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headers.push(
            BTCHeaderInfoResponse.decode(reader, reader.uint32()),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryMainChainResponse {
    return {
      headers: globalThis.Array.isArray(object?.headers)
        ? object.headers.map((e: any) => BTCHeaderInfoResponse.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryMainChainResponse): unknown {
    const obj: any = {};
    if (message.headers?.length) {
      obj.headers = message.headers.map((e) => BTCHeaderInfoResponse.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryMainChainResponse>, I>>(
    base?: I,
  ): QueryMainChainResponse {
    return QueryMainChainResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryMainChainResponse>, I>>(
    object: I,
  ): QueryMainChainResponse {
    const message = createBaseQueryMainChainResponse();
    message.headers =
      object.headers?.map((e) => BTCHeaderInfoResponse.fromPartial(e)) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryTipRequest(): QueryTipRequest {
  return {};
}

export const QueryTipRequest: MessageFns<QueryTipRequest> = {
  encode(
    _: QueryTipRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTipRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTipRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryTipRequest {
    return {};
  },

  toJSON(_: QueryTipRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTipRequest>, I>>(
    base?: I,
  ): QueryTipRequest {
    return QueryTipRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTipRequest>, I>>(
    _: I,
  ): QueryTipRequest {
    const message = createBaseQueryTipRequest();
    return message;
  },
};

function createBaseQueryTipResponse(): QueryTipResponse {
  return { header: undefined };
}

export const QueryTipResponse: MessageFns<QueryTipResponse> = {
  encode(
    message: QueryTipResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.header !== undefined) {
      BTCHeaderInfoResponse.encode(
        message.header,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryTipResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryTipResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = BTCHeaderInfoResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryTipResponse {
    return {
      header: isSet(object.header)
        ? BTCHeaderInfoResponse.fromJSON(object.header)
        : undefined,
    };
  },

  toJSON(message: QueryTipResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = BTCHeaderInfoResponse.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryTipResponse>, I>>(
    base?: I,
  ): QueryTipResponse {
    return QueryTipResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryTipResponse>, I>>(
    object: I,
  ): QueryTipResponse {
    const message = createBaseQueryTipResponse();
    message.header =
      object.header !== undefined && object.header !== null
        ? BTCHeaderInfoResponse.fromPartial(object.header)
        : undefined;
    return message;
  },
};

function createBaseQueryBaseHeaderRequest(): QueryBaseHeaderRequest {
  return {};
}

export const QueryBaseHeaderRequest: MessageFns<QueryBaseHeaderRequest> = {
  encode(
    _: QueryBaseHeaderRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryBaseHeaderRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBaseHeaderRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryBaseHeaderRequest {
    return {};
  },

  toJSON(_: QueryBaseHeaderRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBaseHeaderRequest>, I>>(
    base?: I,
  ): QueryBaseHeaderRequest {
    return QueryBaseHeaderRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBaseHeaderRequest>, I>>(
    _: I,
  ): QueryBaseHeaderRequest {
    const message = createBaseQueryBaseHeaderRequest();
    return message;
  },
};

function createBaseQueryBaseHeaderResponse(): QueryBaseHeaderResponse {
  return { header: undefined };
}

export const QueryBaseHeaderResponse: MessageFns<QueryBaseHeaderResponse> = {
  encode(
    message: QueryBaseHeaderResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.header !== undefined) {
      BTCHeaderInfoResponse.encode(
        message.header,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryBaseHeaderResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBaseHeaderResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = BTCHeaderInfoResponse.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBaseHeaderResponse {
    return {
      header: isSet(object.header)
        ? BTCHeaderInfoResponse.fromJSON(object.header)
        : undefined,
    };
  },

  toJSON(message: QueryBaseHeaderResponse): unknown {
    const obj: any = {};
    if (message.header !== undefined) {
      obj.header = BTCHeaderInfoResponse.toJSON(message.header);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBaseHeaderResponse>, I>>(
    base?: I,
  ): QueryBaseHeaderResponse {
    return QueryBaseHeaderResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBaseHeaderResponse>, I>>(
    object: I,
  ): QueryBaseHeaderResponse {
    const message = createBaseQueryBaseHeaderResponse();
    message.header =
      object.header !== undefined && object.header !== null
        ? BTCHeaderInfoResponse.fromPartial(object.header)
        : undefined;
    return message;
  },
};

function createBaseQueryHeaderDepthRequest(): QueryHeaderDepthRequest {
  return { hash: "" };
}

export const QueryHeaderDepthRequest: MessageFns<QueryHeaderDepthRequest> = {
  encode(
    message: QueryHeaderDepthRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.hash !== "") {
      writer.uint32(10).string(message.hash);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryHeaderDepthRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryHeaderDepthRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.hash = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryHeaderDepthRequest {
    return { hash: isSet(object.hash) ? globalThis.String(object.hash) : "" };
  },

  toJSON(message: QueryHeaderDepthRequest): unknown {
    const obj: any = {};
    if (message.hash !== "") {
      obj.hash = message.hash;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryHeaderDepthRequest>, I>>(
    base?: I,
  ): QueryHeaderDepthRequest {
    return QueryHeaderDepthRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryHeaderDepthRequest>, I>>(
    object: I,
  ): QueryHeaderDepthRequest {
    const message = createBaseQueryHeaderDepthRequest();
    message.hash = object.hash ?? "";
    return message;
  },
};

function createBaseQueryHeaderDepthResponse(): QueryHeaderDepthResponse {
  return { depth: 0 };
}

export const QueryHeaderDepthResponse: MessageFns<QueryHeaderDepthResponse> = {
  encode(
    message: QueryHeaderDepthResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.depth !== 0) {
      writer.uint32(8).uint64(message.depth);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryHeaderDepthResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryHeaderDepthResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.depth = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryHeaderDepthResponse {
    return { depth: isSet(object.depth) ? globalThis.Number(object.depth) : 0 };
  },

  toJSON(message: QueryHeaderDepthResponse): unknown {
    const obj: any = {};
    if (message.depth !== 0) {
      obj.depth = Math.round(message.depth);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryHeaderDepthResponse>, I>>(
    base?: I,
  ): QueryHeaderDepthResponse {
    return QueryHeaderDepthResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryHeaderDepthResponse>, I>>(
    object: I,
  ): QueryHeaderDepthResponse {
    const message = createBaseQueryHeaderDepthResponse();
    message.depth = object.depth ?? 0;
    return message;
  },
};

function createBaseBTCHeaderInfoResponse(): BTCHeaderInfoResponse {
  return { headerHex: "", hashHex: "", height: 0, work: "" };
}

export const BTCHeaderInfoResponse: MessageFns<BTCHeaderInfoResponse> = {
  encode(
    message: BTCHeaderInfoResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.headerHex !== "") {
      writer.uint32(10).string(message.headerHex);
    }
    if (message.hashHex !== "") {
      writer.uint32(18).string(message.hashHex);
    }
    if (message.height !== 0) {
      writer.uint32(24).uint64(message.height);
    }
    if (message.work !== "") {
      writer.uint32(34).string(message.work);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): BTCHeaderInfoResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBTCHeaderInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.headerHex = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hashHex = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.work = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BTCHeaderInfoResponse {
    return {
      headerHex: isSet(object.headerHex)
        ? globalThis.String(object.headerHex)
        : "",
      hashHex: isSet(object.hashHex) ? globalThis.String(object.hashHex) : "",
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      work: isSet(object.work) ? globalThis.String(object.work) : "",
    };
  },

  toJSON(message: BTCHeaderInfoResponse): unknown {
    const obj: any = {};
    if (message.headerHex !== "") {
      obj.headerHex = message.headerHex;
    }
    if (message.hashHex !== "") {
      obj.hashHex = message.hashHex;
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.work !== "") {
      obj.work = message.work;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BTCHeaderInfoResponse>, I>>(
    base?: I,
  ): BTCHeaderInfoResponse {
    return BTCHeaderInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BTCHeaderInfoResponse>, I>>(
    object: I,
  ): BTCHeaderInfoResponse {
    const message = createBaseBTCHeaderInfoResponse();
    message.headerHex = object.headerHex ?? "";
    message.hashHex = object.hashHex ?? "";
    message.height = object.height ?? 0;
    message.work = object.work ?? "";
    return message;
  },
};

/** Query defines the gRPC querier service. */
export interface Query {
  /** Params queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /** Hashes retrieves the hashes maintained by the module. */
  Hashes(request: QueryHashesRequest): Promise<QueryHashesResponse>;
  /** Contains checks whether a hash is maintained by the module. */
  Contains(request: QueryContainsRequest): Promise<QueryContainsResponse>;
  /**
   * ContainsBytes is a temporary method that
   * checks whether a hash is maintained by the module.
   * See discussion at https://github.com/babylonchain/babylon/pull/132
   * for more details.
   */
  ContainsBytes(
    request: QueryContainsBytesRequest,
  ): Promise<QueryContainsBytesResponse>;
  /** MainChain returns the canonical chain */
  MainChain(request: QueryMainChainRequest): Promise<QueryMainChainResponse>;
  /** Tip return best header on canonical chain */
  Tip(request: QueryTipRequest): Promise<QueryTipResponse>;
  /**
   * BaseHeader returns the base BTC header of the chain. This header is defined
   * on genesis.
   */
  BaseHeader(request: QueryBaseHeaderRequest): Promise<QueryBaseHeaderResponse>;
  /**
   * HeaderDepth returns the depth of the header in main chain or error if the
   * block is not found or it exists on fork
   */
  HeaderDepth(
    request: QueryHeaderDepthRequest,
  ): Promise<QueryHeaderDepthResponse>;
}

export const QueryServiceName = "babylon.btclightclient.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.Hashes = this.Hashes.bind(this);
    this.Contains = this.Contains.bind(this);
    this.ContainsBytes = this.ContainsBytes.bind(this);
    this.MainChain = this.MainChain.bind(this);
    this.Tip = this.Tip.bind(this);
    this.BaseHeader = this.BaseHeader.bind(this);
    this.HeaderDepth = this.HeaderDepth.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) =>
      QueryParamsResponse.decode(new BinaryReader(data)),
    );
  }

  Hashes(request: QueryHashesRequest): Promise<QueryHashesResponse> {
    const data = QueryHashesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Hashes", data);
    return promise.then((data) =>
      QueryHashesResponse.decode(new BinaryReader(data)),
    );
  }

  Contains(request: QueryContainsRequest): Promise<QueryContainsResponse> {
    const data = QueryContainsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Contains", data);
    return promise.then((data) =>
      QueryContainsResponse.decode(new BinaryReader(data)),
    );
  }

  ContainsBytes(
    request: QueryContainsBytesRequest,
  ): Promise<QueryContainsBytesResponse> {
    const data = QueryContainsBytesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ContainsBytes", data);
    return promise.then((data) =>
      QueryContainsBytesResponse.decode(new BinaryReader(data)),
    );
  }

  MainChain(request: QueryMainChainRequest): Promise<QueryMainChainResponse> {
    const data = QueryMainChainRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "MainChain", data);
    return promise.then((data) =>
      QueryMainChainResponse.decode(new BinaryReader(data)),
    );
  }

  Tip(request: QueryTipRequest): Promise<QueryTipResponse> {
    const data = QueryTipRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Tip", data);
    return promise.then((data) =>
      QueryTipResponse.decode(new BinaryReader(data)),
    );
  }

  BaseHeader(
    request: QueryBaseHeaderRequest,
  ): Promise<QueryBaseHeaderResponse> {
    const data = QueryBaseHeaderRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "BaseHeader", data);
    return promise.then((data) =>
      QueryBaseHeaderResponse.decode(new BinaryReader(data)),
    );
  }

  HeaderDepth(
    request: QueryHeaderDepthRequest,
  ): Promise<QueryHeaderDepthResponse> {
    const data = QueryHeaderDepthRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "HeaderDepth", data);
    return promise.then((data) =>
      QueryHeaderDepthResponse.decode(new BinaryReader(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
