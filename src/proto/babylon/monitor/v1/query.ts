// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/monitor/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "babylon.monitor.v1";

/**
 * QueryEndedEpochBtcHeightRequest defines a query type for EndedEpochBtcHeight
 * RPC method
 */
export interface QueryEndedEpochBtcHeightRequest {
  epochNum: number;
}

/**
 * QueryEndedEpochBtcHeightResponse defines a response type for
 * EndedEpochBtcHeight RPC method
 */
export interface QueryEndedEpochBtcHeightResponse {
  /** height of btc light client when epoch ended */
  btcLightClientHeight: number;
}

/**
 * QueryReportedCheckpointBtcHeightRequest defines a query type for
 * ReportedCheckpointBtcHeight RPC method
 */
export interface QueryReportedCheckpointBtcHeightRequest {
  /** ckpt_hash is hex encoded byte string of the hash of the checkpoint */
  ckptHash: string;
}

/**
 * QueryReportedCheckpointBtcHeightResponse defines a response type for
 * ReportedCheckpointBtcHeight RPC method
 */
export interface QueryReportedCheckpointBtcHeightResponse {
  /** height of btc light client when checkpoint is reported */
  btcLightClientHeight: number;
}

function createBaseQueryEndedEpochBtcHeightRequest(): QueryEndedEpochBtcHeightRequest {
  return { epochNum: 0 };
}

export const QueryEndedEpochBtcHeightRequest: MessageFns<QueryEndedEpochBtcHeightRequest> =
  {
    encode(
      message: QueryEndedEpochBtcHeightRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.epochNum !== 0) {
        writer.uint32(8).uint64(message.epochNum);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryEndedEpochBtcHeightRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryEndedEpochBtcHeightRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.epochNum = longToNumber(reader.uint64());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryEndedEpochBtcHeightRequest {
      return {
        epochNum: isSet(object.epochNum)
          ? globalThis.Number(object.epochNum)
          : 0,
      };
    },

    toJSON(message: QueryEndedEpochBtcHeightRequest): unknown {
      const obj: any = {};
      if (message.epochNum !== 0) {
        obj.epochNum = Math.round(message.epochNum);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryEndedEpochBtcHeightRequest>, I>>(
      base?: I,
    ): QueryEndedEpochBtcHeightRequest {
      return QueryEndedEpochBtcHeightRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryEndedEpochBtcHeightRequest>, I>,
    >(object: I): QueryEndedEpochBtcHeightRequest {
      const message = createBaseQueryEndedEpochBtcHeightRequest();
      message.epochNum = object.epochNum ?? 0;
      return message;
    },
  };

function createBaseQueryEndedEpochBtcHeightResponse(): QueryEndedEpochBtcHeightResponse {
  return { btcLightClientHeight: 0 };
}

export const QueryEndedEpochBtcHeightResponse: MessageFns<QueryEndedEpochBtcHeightResponse> =
  {
    encode(
      message: QueryEndedEpochBtcHeightResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.btcLightClientHeight !== 0) {
        writer.uint32(8).uint64(message.btcLightClientHeight);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryEndedEpochBtcHeightResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryEndedEpochBtcHeightResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.btcLightClientHeight = longToNumber(reader.uint64());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryEndedEpochBtcHeightResponse {
      return {
        btcLightClientHeight: isSet(object.btcLightClientHeight)
          ? globalThis.Number(object.btcLightClientHeight)
          : 0,
      };
    },

    toJSON(message: QueryEndedEpochBtcHeightResponse): unknown {
      const obj: any = {};
      if (message.btcLightClientHeight !== 0) {
        obj.btcLightClientHeight = Math.round(message.btcLightClientHeight);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryEndedEpochBtcHeightResponse>, I>>(
      base?: I,
    ): QueryEndedEpochBtcHeightResponse {
      return QueryEndedEpochBtcHeightResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryEndedEpochBtcHeightResponse>, I>,
    >(object: I): QueryEndedEpochBtcHeightResponse {
      const message = createBaseQueryEndedEpochBtcHeightResponse();
      message.btcLightClientHeight = object.btcLightClientHeight ?? 0;
      return message;
    },
  };

function createBaseQueryReportedCheckpointBtcHeightRequest(): QueryReportedCheckpointBtcHeightRequest {
  return { ckptHash: "" };
}

export const QueryReportedCheckpointBtcHeightRequest: MessageFns<QueryReportedCheckpointBtcHeightRequest> =
  {
    encode(
      message: QueryReportedCheckpointBtcHeightRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.ckptHash !== "") {
        writer.uint32(10).string(message.ckptHash);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryReportedCheckpointBtcHeightRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryReportedCheckpointBtcHeightRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.ckptHash = reader.string();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryReportedCheckpointBtcHeightRequest {
      return {
        ckptHash: isSet(object.ckptHash)
          ? globalThis.String(object.ckptHash)
          : "",
      };
    },

    toJSON(message: QueryReportedCheckpointBtcHeightRequest): unknown {
      const obj: any = {};
      if (message.ckptHash !== "") {
        obj.ckptHash = message.ckptHash;
      }
      return obj;
    },

    create<
      I extends Exact<DeepPartial<QueryReportedCheckpointBtcHeightRequest>, I>,
    >(base?: I): QueryReportedCheckpointBtcHeightRequest {
      return QueryReportedCheckpointBtcHeightRequest.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryReportedCheckpointBtcHeightRequest>, I>,
    >(object: I): QueryReportedCheckpointBtcHeightRequest {
      const message = createBaseQueryReportedCheckpointBtcHeightRequest();
      message.ckptHash = object.ckptHash ?? "";
      return message;
    },
  };

function createBaseQueryReportedCheckpointBtcHeightResponse(): QueryReportedCheckpointBtcHeightResponse {
  return { btcLightClientHeight: 0 };
}

export const QueryReportedCheckpointBtcHeightResponse: MessageFns<QueryReportedCheckpointBtcHeightResponse> =
  {
    encode(
      message: QueryReportedCheckpointBtcHeightResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.btcLightClientHeight !== 0) {
        writer.uint32(8).uint64(message.btcLightClientHeight);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryReportedCheckpointBtcHeightResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryReportedCheckpointBtcHeightResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.btcLightClientHeight = longToNumber(reader.uint64());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryReportedCheckpointBtcHeightResponse {
      return {
        btcLightClientHeight: isSet(object.btcLightClientHeight)
          ? globalThis.Number(object.btcLightClientHeight)
          : 0,
      };
    },

    toJSON(message: QueryReportedCheckpointBtcHeightResponse): unknown {
      const obj: any = {};
      if (message.btcLightClientHeight !== 0) {
        obj.btcLightClientHeight = Math.round(message.btcLightClientHeight);
      }
      return obj;
    },

    create<
      I extends Exact<DeepPartial<QueryReportedCheckpointBtcHeightResponse>, I>,
    >(base?: I): QueryReportedCheckpointBtcHeightResponse {
      return QueryReportedCheckpointBtcHeightResponse.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryReportedCheckpointBtcHeightResponse>, I>,
    >(object: I): QueryReportedCheckpointBtcHeightResponse {
      const message = createBaseQueryReportedCheckpointBtcHeightResponse();
      message.btcLightClientHeight = object.btcLightClientHeight ?? 0;
      return message;
    },
  };

/** Query defines the gRPC querier service. */
export interface Query {
  /**
   * EndedEpochBtcHeight returns the BTC light client height at provided epoch
   * finish
   */
  EndedEpochBtcHeight(
    request: QueryEndedEpochBtcHeightRequest,
  ): Promise<QueryEndedEpochBtcHeightResponse>;
  /**
   * ReportedCheckpointBtcHeight returns the BTC light client height at which
   * the checkpoint with the given hash is reported back to Babylon
   */
  ReportedCheckpointBtcHeight(
    request: QueryReportedCheckpointBtcHeightRequest,
  ): Promise<QueryReportedCheckpointBtcHeightResponse>;
}

export const QueryServiceName = "babylon.monitor.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.EndedEpochBtcHeight = this.EndedEpochBtcHeight.bind(this);
    this.ReportedCheckpointBtcHeight =
      this.ReportedCheckpointBtcHeight.bind(this);
  }
  EndedEpochBtcHeight(
    request: QueryEndedEpochBtcHeightRequest,
  ): Promise<QueryEndedEpochBtcHeightResponse> {
    const data = QueryEndedEpochBtcHeightRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EndedEpochBtcHeight", data);
    return promise.then((data) =>
      QueryEndedEpochBtcHeightResponse.decode(new BinaryReader(data)),
    );
  }

  ReportedCheckpointBtcHeight(
    request: QueryReportedCheckpointBtcHeightRequest,
  ): Promise<QueryReportedCheckpointBtcHeightResponse> {
    const data =
      QueryReportedCheckpointBtcHeightRequest.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "ReportedCheckpointBtcHeight",
      data,
    );
    return promise.then((data) =>
      QueryReportedCheckpointBtcHeightResponse.decode(new BinaryReader(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
