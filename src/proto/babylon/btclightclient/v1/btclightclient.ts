// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/btclightclient/v1/btclightclient.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "babylon.btclightclient.v1";

/**
 * BTCHeaderInfo is a structure that contains all relevant information about a
 * BTC header
 *  - Full header bytes
 *  - Header hash for easy retrieval
 *  - Height of the header in the BTC chain
 *  - Total work spent on the header. This is the sum of the work corresponding
 *  to the header Bits field
 *    and the total work of the header.
 */
export interface BTCHeaderInfo {
  header: Uint8Array;
  hash: Uint8Array;
  height: number;
  work: Uint8Array;
}

function createBaseBTCHeaderInfo(): BTCHeaderInfo {
  return {
    header: new Uint8Array(0),
    hash: new Uint8Array(0),
    height: 0,
    work: new Uint8Array(0),
  };
}

export const BTCHeaderInfo: MessageFns<BTCHeaderInfo> = {
  encode(
    message: BTCHeaderInfo,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.header.length !== 0) {
      writer.uint32(10).bytes(message.header);
    }
    if (message.hash.length !== 0) {
      writer.uint32(18).bytes(message.hash);
    }
    if (message.height !== 0) {
      writer.uint32(24).uint64(message.height);
    }
    if (message.work.length !== 0) {
      writer.uint32(34).bytes(message.work);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BTCHeaderInfo {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBTCHeaderInfo();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.header = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.hash = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.work = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BTCHeaderInfo {
    return {
      header: isSet(object.header)
        ? bytesFromBase64(object.header)
        : new Uint8Array(0),
      hash: isSet(object.hash)
        ? bytesFromBase64(object.hash)
        : new Uint8Array(0),
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      work: isSet(object.work)
        ? bytesFromBase64(object.work)
        : new Uint8Array(0),
    };
  },

  toJSON(message: BTCHeaderInfo): unknown {
    const obj: any = {};
    if (message.header.length !== 0) {
      obj.header = base64FromBytes(message.header);
    }
    if (message.hash.length !== 0) {
      obj.hash = base64FromBytes(message.hash);
    }
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    if (message.work.length !== 0) {
      obj.work = base64FromBytes(message.work);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BTCHeaderInfo>, I>>(
    base?: I,
  ): BTCHeaderInfo {
    return BTCHeaderInfo.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BTCHeaderInfo>, I>>(
    object: I,
  ): BTCHeaderInfo {
    const message = createBaseBTCHeaderInfo();
    message.header = object.header ?? new Uint8Array(0);
    message.hash = object.hash ?? new Uint8Array(0);
    message.height = object.height ?? 0;
    message.work = object.work ?? new Uint8Array(0);
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
