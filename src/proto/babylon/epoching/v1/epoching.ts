// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/epoching/v1/epoching.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Coin } from "../../../cosmos/base/v1beta1/coin";
import {
  MsgBeginRedelegate,
  MsgCancelUnbondingDelegation,
  MsgCreateValidator,
  MsgDelegate,
  MsgUndelegate,
} from "../../../cosmos/staking/v1beta1/tx";
import { Timestamp } from "../../../google/protobuf/timestamp";

export const protobufPackage = "babylon.epoching.v1";

/** BondState is the bond state of a validator or delegation */
export enum BondState {
  /** CREATED - CREATED is when the validator/delegation has been created */
  CREATED = 0,
  /** BONDED - CREATED is when the validator/delegation has become bonded */
  BONDED = 1,
  /** UNBONDING - CREATED is when the validator/delegation has become unbonding */
  UNBONDING = 2,
  /** UNBONDED - CREATED is when the validator/delegation has become unbonded */
  UNBONDED = 3,
  /** REMOVED - CREATED is when the validator/delegation has been removed */
  REMOVED = 4,
  UNRECOGNIZED = -1,
}

export function bondStateFromJSON(object: any): BondState {
  switch (object) {
    case 0:
    case "CREATED":
      return BondState.CREATED;
    case 1:
    case "BONDED":
      return BondState.BONDED;
    case 2:
    case "UNBONDING":
      return BondState.UNBONDING;
    case 3:
    case "UNBONDED":
      return BondState.UNBONDED;
    case 4:
    case "REMOVED":
      return BondState.REMOVED;
    case -1:
    case "UNRECOGNIZED":
    default:
      return BondState.UNRECOGNIZED;
  }
}

export function bondStateToJSON(object: BondState): string {
  switch (object) {
    case BondState.CREATED:
      return "CREATED";
    case BondState.BONDED:
      return "BONDED";
    case BondState.UNBONDING:
      return "UNBONDING";
    case BondState.UNBONDED:
      return "UNBONDED";
    case BondState.REMOVED:
      return "REMOVED";
    case BondState.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** Epoch is a structure that contains the metadata of an epoch */
export interface Epoch {
  /** epoch_number is the number of this epoch */
  epochNumber: number;
  /** current_epoch_interval is the epoch interval at the time of this epoch */
  currentEpochInterval: number;
  /** first_block_height is the height of the first block in this epoch */
  firstBlockHeight: number;
  /**
   * last_block_time is the time of the last block in this epoch.
   * Babylon needs to remember the last header's time of each epoch to complete
   * unbonding validators/delegations when a previous epoch's checkpoint is
   * finalised. The last_block_time field is nil in the epoch's beginning, and
   * is set upon the end of this epoch.
   */
  lastBlockTime: Date | undefined;
  /**
   * sealer is the last block of the sealed epoch
   * sealer_app_hash points to the sealer but stored in the 1st header
   * of the next epoch
   */
  sealerAppHash: Uint8Array;
  /**
   * sealer_block_hash is the hash of the sealer
   * the validator set has generated a BLS multisig on the hash,
   * i.e., hash of the last block in the epoch
   */
  sealerBlockHash: Uint8Array;
}

/**
 * QueuedMessage is a message that can change the validator set and is delayed
 * to the end of an epoch
 */
export interface QueuedMessage {
  /** tx_id is the ID of the tx that contains the message */
  txId: Uint8Array;
  /** msg_id is the original message ID, i.e., hash of the marshaled message */
  msgId: Uint8Array;
  /** block_height is the height when this msg is submitted to Babylon */
  blockHeight: number;
  /** block_time is the timestamp when this msg is submitted to Babylon */
  blockTime: Date | undefined;
  msgCreateValidator?: MsgCreateValidator | undefined;
  msgDelegate?: MsgDelegate | undefined;
  msgUndelegate?: MsgUndelegate | undefined;
  msgBeginRedelegate?: MsgBeginRedelegate | undefined;
  msgCancelUnbondingDelegation?: MsgCancelUnbondingDelegation | undefined;
}

/** ValStateUpdate is a message that records a state update of a validator */
export interface ValStateUpdate {
  state: BondState;
  blockHeight: number;
  blockTime: Date | undefined;
}

/**
 * ValidatorLifecycle is a message that records the lifecycle of
 * a validator
 */
export interface ValidatorLifecycle {
  valAddr: string;
  valLife: ValStateUpdate[];
}

/**
 * DelegationStateUpdate is the message that records a state update of a
 * delegation
 */
export interface DelegationStateUpdate {
  state: BondState;
  valAddr: string;
  amount: Coin | undefined;
  blockHeight: number;
  blockTime: Date | undefined;
}

/**
 * ValidatorLifecycle is a message that records the lifecycle of
 * a delegation
 */
export interface DelegationLifecycle {
  delAddr: string;
  delLife: DelegationStateUpdate[];
}

/** Validator is a message that denotes a validator */
export interface Validator {
  /** addr is the validator's address (in sdk.ValAddress) */
  addr: Uint8Array;
  /** power is the validator's voting power */
  power: number;
}

function createBaseEpoch(): Epoch {
  return {
    epochNumber: 0,
    currentEpochInterval: 0,
    firstBlockHeight: 0,
    lastBlockTime: undefined,
    sealerAppHash: new Uint8Array(0),
    sealerBlockHash: new Uint8Array(0),
  };
}

export const Epoch: MessageFns<Epoch> = {
  encode(
    message: Epoch,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.epochNumber !== 0) {
      writer.uint32(8).uint64(message.epochNumber);
    }
    if (message.currentEpochInterval !== 0) {
      writer.uint32(16).uint64(message.currentEpochInterval);
    }
    if (message.firstBlockHeight !== 0) {
      writer.uint32(24).uint64(message.firstBlockHeight);
    }
    if (message.lastBlockTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.lastBlockTime),
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.sealerAppHash.length !== 0) {
      writer.uint32(42).bytes(message.sealerAppHash);
    }
    if (message.sealerBlockHash.length !== 0) {
      writer.uint32(50).bytes(message.sealerBlockHash);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Epoch {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEpoch();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.epochNumber = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.currentEpochInterval = longToNumber(reader.uint64());
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.firstBlockHeight = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.lastBlockTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.sealerAppHash = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sealerBlockHash = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Epoch {
    return {
      epochNumber: isSet(object.epochNumber)
        ? globalThis.Number(object.epochNumber)
        : 0,
      currentEpochInterval: isSet(object.currentEpochInterval)
        ? globalThis.Number(object.currentEpochInterval)
        : 0,
      firstBlockHeight: isSet(object.firstBlockHeight)
        ? globalThis.Number(object.firstBlockHeight)
        : 0,
      lastBlockTime: isSet(object.lastBlockTime)
        ? fromJsonTimestamp(object.lastBlockTime)
        : undefined,
      sealerAppHash: isSet(object.sealerAppHash)
        ? bytesFromBase64(object.sealerAppHash)
        : new Uint8Array(0),
      sealerBlockHash: isSet(object.sealerBlockHash)
        ? bytesFromBase64(object.sealerBlockHash)
        : new Uint8Array(0),
    };
  },

  toJSON(message: Epoch): unknown {
    const obj: any = {};
    if (message.epochNumber !== 0) {
      obj.epochNumber = Math.round(message.epochNumber);
    }
    if (message.currentEpochInterval !== 0) {
      obj.currentEpochInterval = Math.round(message.currentEpochInterval);
    }
    if (message.firstBlockHeight !== 0) {
      obj.firstBlockHeight = Math.round(message.firstBlockHeight);
    }
    if (message.lastBlockTime !== undefined) {
      obj.lastBlockTime = message.lastBlockTime.toISOString();
    }
    if (message.sealerAppHash.length !== 0) {
      obj.sealerAppHash = base64FromBytes(message.sealerAppHash);
    }
    if (message.sealerBlockHash.length !== 0) {
      obj.sealerBlockHash = base64FromBytes(message.sealerBlockHash);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Epoch>, I>>(base?: I): Epoch {
    return Epoch.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Epoch>, I>>(object: I): Epoch {
    const message = createBaseEpoch();
    message.epochNumber = object.epochNumber ?? 0;
    message.currentEpochInterval = object.currentEpochInterval ?? 0;
    message.firstBlockHeight = object.firstBlockHeight ?? 0;
    message.lastBlockTime = object.lastBlockTime ?? undefined;
    message.sealerAppHash = object.sealerAppHash ?? new Uint8Array(0);
    message.sealerBlockHash = object.sealerBlockHash ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueuedMessage(): QueuedMessage {
  return {
    txId: new Uint8Array(0),
    msgId: new Uint8Array(0),
    blockHeight: 0,
    blockTime: undefined,
    msgCreateValidator: undefined,
    msgDelegate: undefined,
    msgUndelegate: undefined,
    msgBeginRedelegate: undefined,
    msgCancelUnbondingDelegation: undefined,
  };
}

export const QueuedMessage: MessageFns<QueuedMessage> = {
  encode(
    message: QueuedMessage,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.txId.length !== 0) {
      writer.uint32(10).bytes(message.txId);
    }
    if (message.msgId.length !== 0) {
      writer.uint32(18).bytes(message.msgId);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(24).uint64(message.blockHeight);
    }
    if (message.blockTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.blockTime),
        writer.uint32(34).fork(),
      ).join();
    }
    if (message.msgCreateValidator !== undefined) {
      MsgCreateValidator.encode(
        message.msgCreateValidator,
        writer.uint32(42).fork(),
      ).join();
    }
    if (message.msgDelegate !== undefined) {
      MsgDelegate.encode(message.msgDelegate, writer.uint32(50).fork()).join();
    }
    if (message.msgUndelegate !== undefined) {
      MsgUndelegate.encode(
        message.msgUndelegate,
        writer.uint32(58).fork(),
      ).join();
    }
    if (message.msgBeginRedelegate !== undefined) {
      MsgBeginRedelegate.encode(
        message.msgBeginRedelegate,
        writer.uint32(66).fork(),
      ).join();
    }
    if (message.msgCancelUnbondingDelegation !== undefined) {
      MsgCancelUnbondingDelegation.encode(
        message.msgCancelUnbondingDelegation,
        writer.uint32(74).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueuedMessage {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueuedMessage();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.txId = reader.bytes();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.msgId = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.blockHeight = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.blockTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.msgCreateValidator = MsgCreateValidator.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.msgDelegate = MsgDelegate.decode(reader, reader.uint32());
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.msgUndelegate = MsgUndelegate.decode(reader, reader.uint32());
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.msgBeginRedelegate = MsgBeginRedelegate.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 9:
          if (tag !== 74) {
            break;
          }

          message.msgCancelUnbondingDelegation =
            MsgCancelUnbondingDelegation.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueuedMessage {
    return {
      txId: isSet(object.txId)
        ? bytesFromBase64(object.txId)
        : new Uint8Array(0),
      msgId: isSet(object.msgId)
        ? bytesFromBase64(object.msgId)
        : new Uint8Array(0),
      blockHeight: isSet(object.blockHeight)
        ? globalThis.Number(object.blockHeight)
        : 0,
      blockTime: isSet(object.blockTime)
        ? fromJsonTimestamp(object.blockTime)
        : undefined,
      msgCreateValidator: isSet(object.msgCreateValidator)
        ? MsgCreateValidator.fromJSON(object.msgCreateValidator)
        : undefined,
      msgDelegate: isSet(object.msgDelegate)
        ? MsgDelegate.fromJSON(object.msgDelegate)
        : undefined,
      msgUndelegate: isSet(object.msgUndelegate)
        ? MsgUndelegate.fromJSON(object.msgUndelegate)
        : undefined,
      msgBeginRedelegate: isSet(object.msgBeginRedelegate)
        ? MsgBeginRedelegate.fromJSON(object.msgBeginRedelegate)
        : undefined,
      msgCancelUnbondingDelegation: isSet(object.msgCancelUnbondingDelegation)
        ? MsgCancelUnbondingDelegation.fromJSON(
            object.msgCancelUnbondingDelegation,
          )
        : undefined,
    };
  },

  toJSON(message: QueuedMessage): unknown {
    const obj: any = {};
    if (message.txId.length !== 0) {
      obj.txId = base64FromBytes(message.txId);
    }
    if (message.msgId.length !== 0) {
      obj.msgId = base64FromBytes(message.msgId);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.blockTime !== undefined) {
      obj.blockTime = message.blockTime.toISOString();
    }
    if (message.msgCreateValidator !== undefined) {
      obj.msgCreateValidator = MsgCreateValidator.toJSON(
        message.msgCreateValidator,
      );
    }
    if (message.msgDelegate !== undefined) {
      obj.msgDelegate = MsgDelegate.toJSON(message.msgDelegate);
    }
    if (message.msgUndelegate !== undefined) {
      obj.msgUndelegate = MsgUndelegate.toJSON(message.msgUndelegate);
    }
    if (message.msgBeginRedelegate !== undefined) {
      obj.msgBeginRedelegate = MsgBeginRedelegate.toJSON(
        message.msgBeginRedelegate,
      );
    }
    if (message.msgCancelUnbondingDelegation !== undefined) {
      obj.msgCancelUnbondingDelegation = MsgCancelUnbondingDelegation.toJSON(
        message.msgCancelUnbondingDelegation,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueuedMessage>, I>>(
    base?: I,
  ): QueuedMessage {
    return QueuedMessage.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueuedMessage>, I>>(
    object: I,
  ): QueuedMessage {
    const message = createBaseQueuedMessage();
    message.txId = object.txId ?? new Uint8Array(0);
    message.msgId = object.msgId ?? new Uint8Array(0);
    message.blockHeight = object.blockHeight ?? 0;
    message.blockTime = object.blockTime ?? undefined;
    message.msgCreateValidator =
      object.msgCreateValidator !== undefined &&
      object.msgCreateValidator !== null
        ? MsgCreateValidator.fromPartial(object.msgCreateValidator)
        : undefined;
    message.msgDelegate =
      object.msgDelegate !== undefined && object.msgDelegate !== null
        ? MsgDelegate.fromPartial(object.msgDelegate)
        : undefined;
    message.msgUndelegate =
      object.msgUndelegate !== undefined && object.msgUndelegate !== null
        ? MsgUndelegate.fromPartial(object.msgUndelegate)
        : undefined;
    message.msgBeginRedelegate =
      object.msgBeginRedelegate !== undefined &&
      object.msgBeginRedelegate !== null
        ? MsgBeginRedelegate.fromPartial(object.msgBeginRedelegate)
        : undefined;
    message.msgCancelUnbondingDelegation =
      object.msgCancelUnbondingDelegation !== undefined &&
      object.msgCancelUnbondingDelegation !== null
        ? MsgCancelUnbondingDelegation.fromPartial(
            object.msgCancelUnbondingDelegation,
          )
        : undefined;
    return message;
  },
};

function createBaseValStateUpdate(): ValStateUpdate {
  return { state: 0, blockHeight: 0, blockTime: undefined };
}

export const ValStateUpdate: MessageFns<ValStateUpdate> = {
  encode(
    message: ValStateUpdate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(16).uint64(message.blockHeight);
    }
    if (message.blockTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.blockTime),
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ValStateUpdate {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValStateUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.blockHeight = longToNumber(reader.uint64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.blockTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValStateUpdate {
    return {
      state: isSet(object.state) ? bondStateFromJSON(object.state) : 0,
      blockHeight: isSet(object.blockHeight)
        ? globalThis.Number(object.blockHeight)
        : 0,
      blockTime: isSet(object.blockTime)
        ? fromJsonTimestamp(object.blockTime)
        : undefined,
    };
  },

  toJSON(message: ValStateUpdate): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = bondStateToJSON(message.state);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.blockTime !== undefined) {
      obj.blockTime = message.blockTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValStateUpdate>, I>>(
    base?: I,
  ): ValStateUpdate {
    return ValStateUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValStateUpdate>, I>>(
    object: I,
  ): ValStateUpdate {
    const message = createBaseValStateUpdate();
    message.state = object.state ?? 0;
    message.blockHeight = object.blockHeight ?? 0;
    message.blockTime = object.blockTime ?? undefined;
    return message;
  },
};

function createBaseValidatorLifecycle(): ValidatorLifecycle {
  return { valAddr: "", valLife: [] };
}

export const ValidatorLifecycle: MessageFns<ValidatorLifecycle> = {
  encode(
    message: ValidatorLifecycle,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.valAddr !== "") {
      writer.uint32(10).string(message.valAddr);
    }
    for (const v of message.valLife) {
      ValStateUpdate.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): ValidatorLifecycle {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidatorLifecycle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.valAddr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.valLife.push(ValStateUpdate.decode(reader, reader.uint32()));
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ValidatorLifecycle {
    return {
      valAddr: isSet(object.valAddr) ? globalThis.String(object.valAddr) : "",
      valLife: globalThis.Array.isArray(object?.valLife)
        ? object.valLife.map((e: any) => ValStateUpdate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: ValidatorLifecycle): unknown {
    const obj: any = {};
    if (message.valAddr !== "") {
      obj.valAddr = message.valAddr;
    }
    if (message.valLife?.length) {
      obj.valLife = message.valLife.map((e) => ValStateUpdate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ValidatorLifecycle>, I>>(
    base?: I,
  ): ValidatorLifecycle {
    return ValidatorLifecycle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ValidatorLifecycle>, I>>(
    object: I,
  ): ValidatorLifecycle {
    const message = createBaseValidatorLifecycle();
    message.valAddr = object.valAddr ?? "";
    message.valLife =
      object.valLife?.map((e) => ValStateUpdate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDelegationStateUpdate(): DelegationStateUpdate {
  return {
    state: 0,
    valAddr: "",
    amount: undefined,
    blockHeight: 0,
    blockTime: undefined,
  };
}

export const DelegationStateUpdate: MessageFns<DelegationStateUpdate> = {
  encode(
    message: DelegationStateUpdate,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.state !== 0) {
      writer.uint32(8).int32(message.state);
    }
    if (message.valAddr !== "") {
      writer.uint32(18).string(message.valAddr);
    }
    if (message.amount !== undefined) {
      Coin.encode(message.amount, writer.uint32(26).fork()).join();
    }
    if (message.blockHeight !== 0) {
      writer.uint32(32).uint64(message.blockHeight);
    }
    if (message.blockTime !== undefined) {
      Timestamp.encode(
        toTimestamp(message.blockTime),
        writer.uint32(42).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DelegationStateUpdate {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegationStateUpdate();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.state = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.valAddr = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.amount = Coin.decode(reader, reader.uint32());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.blockHeight = longToNumber(reader.uint64());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.blockTime = fromTimestamp(
            Timestamp.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DelegationStateUpdate {
    return {
      state: isSet(object.state) ? bondStateFromJSON(object.state) : 0,
      valAddr: isSet(object.valAddr) ? globalThis.String(object.valAddr) : "",
      amount: isSet(object.amount) ? Coin.fromJSON(object.amount) : undefined,
      blockHeight: isSet(object.blockHeight)
        ? globalThis.Number(object.blockHeight)
        : 0,
      blockTime: isSet(object.blockTime)
        ? fromJsonTimestamp(object.blockTime)
        : undefined,
    };
  },

  toJSON(message: DelegationStateUpdate): unknown {
    const obj: any = {};
    if (message.state !== 0) {
      obj.state = bondStateToJSON(message.state);
    }
    if (message.valAddr !== "") {
      obj.valAddr = message.valAddr;
    }
    if (message.amount !== undefined) {
      obj.amount = Coin.toJSON(message.amount);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.blockTime !== undefined) {
      obj.blockTime = message.blockTime.toISOString();
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DelegationStateUpdate>, I>>(
    base?: I,
  ): DelegationStateUpdate {
    return DelegationStateUpdate.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DelegationStateUpdate>, I>>(
    object: I,
  ): DelegationStateUpdate {
    const message = createBaseDelegationStateUpdate();
    message.state = object.state ?? 0;
    message.valAddr = object.valAddr ?? "";
    message.amount =
      object.amount !== undefined && object.amount !== null
        ? Coin.fromPartial(object.amount)
        : undefined;
    message.blockHeight = object.blockHeight ?? 0;
    message.blockTime = object.blockTime ?? undefined;
    return message;
  },
};

function createBaseDelegationLifecycle(): DelegationLifecycle {
  return { delAddr: "", delLife: [] };
}

export const DelegationLifecycle: MessageFns<DelegationLifecycle> = {
  encode(
    message: DelegationLifecycle,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.delAddr !== "") {
      writer.uint32(10).string(message.delAddr);
    }
    for (const v of message.delLife) {
      DelegationStateUpdate.encode(v!, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): DelegationLifecycle {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDelegationLifecycle();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.delAddr = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.delLife.push(
            DelegationStateUpdate.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DelegationLifecycle {
    return {
      delAddr: isSet(object.delAddr) ? globalThis.String(object.delAddr) : "",
      delLife: globalThis.Array.isArray(object?.delLife)
        ? object.delLife.map((e: any) => DelegationStateUpdate.fromJSON(e))
        : [],
    };
  },

  toJSON(message: DelegationLifecycle): unknown {
    const obj: any = {};
    if (message.delAddr !== "") {
      obj.delAddr = message.delAddr;
    }
    if (message.delLife?.length) {
      obj.delLife = message.delLife.map((e) => DelegationStateUpdate.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DelegationLifecycle>, I>>(
    base?: I,
  ): DelegationLifecycle {
    return DelegationLifecycle.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DelegationLifecycle>, I>>(
    object: I,
  ): DelegationLifecycle {
    const message = createBaseDelegationLifecycle();
    message.delAddr = object.delAddr ?? "";
    message.delLife =
      object.delLife?.map((e) => DelegationStateUpdate.fromPartial(e)) || [];
    return message;
  },
};

function createBaseValidator(): Validator {
  return { addr: new Uint8Array(0), power: 0 };
}

export const Validator: MessageFns<Validator> = {
  encode(
    message: Validator,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.addr.length !== 0) {
      writer.uint32(10).bytes(message.addr);
    }
    if (message.power !== 0) {
      writer.uint32(16).int64(message.power);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Validator {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseValidator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.addr = reader.bytes();
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.power = longToNumber(reader.int64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Validator {
    return {
      addr: isSet(object.addr)
        ? bytesFromBase64(object.addr)
        : new Uint8Array(0),
      power: isSet(object.power) ? globalThis.Number(object.power) : 0,
    };
  },

  toJSON(message: Validator): unknown {
    const obj: any = {};
    if (message.addr.length !== 0) {
      obj.addr = base64FromBytes(message.addr);
    }
    if (message.power !== 0) {
      obj.power = Math.round(message.power);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Validator>, I>>(base?: I): Validator {
    return Validator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Validator>, I>>(
    object: I,
  ): Validator {
    const message = createBaseValidator();
    message.addr = object.addr ?? new Uint8Array(0);
    message.power = object.power ?? 0;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
