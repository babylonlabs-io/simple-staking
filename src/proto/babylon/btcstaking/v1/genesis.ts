// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/btcstaking/v1/genesis.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  BTCDelegation,
  BTCDelegatorDelegationIndex,
  FinalityProvider,
} from "./btcstaking";
import { EventPowerDistUpdate } from "./events";
import { VotingPowerDistCache } from "./incentive";
import { Params } from "./params";

export const protobufPackage = "babylon.btcstaking.v1";

/** GenesisState defines the btcstaking module's genesis state. */
export interface GenesisState {
  /** different versions of params used through the history of the chain */
  params: Params[];
  /** finality_providers all the finality providers registered. */
  finalityProviders: FinalityProvider[];
  /** btc_delegations all the btc delegations in the state. */
  btcDelegations: BTCDelegation[];
  /** voting_powers the voting power of every finality provider at every block height. */
  votingPowers: VotingPowerFP[];
  /** block_height_chains the block height of babylon and bitcoin. */
  blockHeightChains: BlockHeightBbnToBtc[];
  /** btc_delegators contains all the btc delegators with the associated finality provider. */
  btcDelegators: BTCDelegator[];
  /** all the events and its indexes. */
  events: EventIndex[];
  /**
   * vp_dst_cache is the table of all providers voting power with the total at one specific block.
   * TODO: remove this after not storing in the keeper store it anymore.
   */
  vpDstCache: VotingPowerDistCacheBlkHeight[];
}

/**
 * VotingPowerFP contains the information about the voting power
 * of an finality provider in a specific block height.
 */
export interface VotingPowerFP {
  /** block_height is the height of the block the voting power was stored. */
  blockHeight: number;
  /** fp_btc_pk the finality provider btc public key. */
  fpBtcPk: Uint8Array;
  /** voting_power is the power of the finality provider at this specific block height. */
  votingPower: number;
}

/** VotingPowerDistCacheBlkHeight the total voting power of the finality providers at one specific block height */
export interface VotingPowerDistCacheBlkHeight {
  /** block_height is the height of the block the voting power distribution cached was stored. */
  blockHeight: number;
  /** vp_distribution the finality providers distribution cache at that height. */
  vpDistribution: VotingPowerDistCache | undefined;
}

/** BlockHeightBbnToBtc stores the btc <-> bbn block. */
export interface BlockHeightBbnToBtc {
  /** block_height_bbn is the height of the block in the babylon chain. */
  blockHeightBbn: number;
  /** block_height_btc is the height of the block in the BTC. */
  blockHeightBtc: number;
}

/** BTCDelegator BTC delegator information with the associated finality provider. */
export interface BTCDelegator {
  /** idx the btc delegator index. */
  idx: BTCDelegatorDelegationIndex | undefined;
  /** fp_btc_pk the finality provider btc public key. */
  fpBtcPk: Uint8Array;
  /** del_btc_pk the delegator btc public key. */
  delBtcPk: Uint8Array;
}

/** EventIndex contains the event and its index. */
export interface EventIndex {
  /** idx is the index the event was stored. */
  idx: number;
  /** block_height_btc is the height of the block in the BTC chain. */
  blockHeightBtc: number;
  /** event the event stored. */
  event: EventPowerDistUpdate | undefined;
}

function createBaseGenesisState(): GenesisState {
  return {
    params: [],
    finalityProviders: [],
    btcDelegations: [],
    votingPowers: [],
    blockHeightChains: [],
    btcDelegators: [],
    events: [],
    vpDstCache: [],
  };
}

export const GenesisState: MessageFns<GenesisState> = {
  encode(
    message: GenesisState,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.params) {
      Params.encode(v!, writer.uint32(10).fork()).join();
    }
    for (const v of message.finalityProviders) {
      FinalityProvider.encode(v!, writer.uint32(18).fork()).join();
    }
    for (const v of message.btcDelegations) {
      BTCDelegation.encode(v!, writer.uint32(26).fork()).join();
    }
    for (const v of message.votingPowers) {
      VotingPowerFP.encode(v!, writer.uint32(34).fork()).join();
    }
    for (const v of message.blockHeightChains) {
      BlockHeightBbnToBtc.encode(v!, writer.uint32(42).fork()).join();
    }
    for (const v of message.btcDelegators) {
      BTCDelegator.encode(v!, writer.uint32(50).fork()).join();
    }
    for (const v of message.events) {
      EventIndex.encode(v!, writer.uint32(58).fork()).join();
    }
    for (const v of message.vpDstCache) {
      VotingPowerDistCacheBlkHeight.encode(v!, writer.uint32(66).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GenesisState {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGenesisState();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params.push(Params.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.finalityProviders.push(
            FinalityProvider.decode(reader, reader.uint32()),
          );
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.btcDelegations.push(
            BTCDelegation.decode(reader, reader.uint32()),
          );
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.votingPowers.push(
            VotingPowerFP.decode(reader, reader.uint32()),
          );
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.blockHeightChains.push(
            BlockHeightBbnToBtc.decode(reader, reader.uint32()),
          );
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.btcDelegators.push(
            BTCDelegator.decode(reader, reader.uint32()),
          );
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.events.push(EventIndex.decode(reader, reader.uint32()));
          continue;
        case 8:
          if (tag !== 66) {
            break;
          }

          message.vpDstCache.push(
            VotingPowerDistCacheBlkHeight.decode(reader, reader.uint32()),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GenesisState {
    return {
      params: globalThis.Array.isArray(object?.params)
        ? object.params.map((e: any) => Params.fromJSON(e))
        : [],
      finalityProviders: globalThis.Array.isArray(object?.finalityProviders)
        ? object.finalityProviders.map((e: any) => FinalityProvider.fromJSON(e))
        : [],
      btcDelegations: globalThis.Array.isArray(object?.btcDelegations)
        ? object.btcDelegations.map((e: any) => BTCDelegation.fromJSON(e))
        : [],
      votingPowers: globalThis.Array.isArray(object?.votingPowers)
        ? object.votingPowers.map((e: any) => VotingPowerFP.fromJSON(e))
        : [],
      blockHeightChains: globalThis.Array.isArray(object?.blockHeightChains)
        ? object.blockHeightChains.map((e: any) =>
            BlockHeightBbnToBtc.fromJSON(e),
          )
        : [],
      btcDelegators: globalThis.Array.isArray(object?.btcDelegators)
        ? object.btcDelegators.map((e: any) => BTCDelegator.fromJSON(e))
        : [],
      events: globalThis.Array.isArray(object?.events)
        ? object.events.map((e: any) => EventIndex.fromJSON(e))
        : [],
      vpDstCache: globalThis.Array.isArray(object?.vpDstCache)
        ? object.vpDstCache.map((e: any) =>
            VotingPowerDistCacheBlkHeight.fromJSON(e),
          )
        : [],
    };
  },

  toJSON(message: GenesisState): unknown {
    const obj: any = {};
    if (message.params?.length) {
      obj.params = message.params.map((e) => Params.toJSON(e));
    }
    if (message.finalityProviders?.length) {
      obj.finalityProviders = message.finalityProviders.map((e) =>
        FinalityProvider.toJSON(e),
      );
    }
    if (message.btcDelegations?.length) {
      obj.btcDelegations = message.btcDelegations.map((e) =>
        BTCDelegation.toJSON(e),
      );
    }
    if (message.votingPowers?.length) {
      obj.votingPowers = message.votingPowers.map((e) =>
        VotingPowerFP.toJSON(e),
      );
    }
    if (message.blockHeightChains?.length) {
      obj.blockHeightChains = message.blockHeightChains.map((e) =>
        BlockHeightBbnToBtc.toJSON(e),
      );
    }
    if (message.btcDelegators?.length) {
      obj.btcDelegators = message.btcDelegators.map((e) =>
        BTCDelegator.toJSON(e),
      );
    }
    if (message.events?.length) {
      obj.events = message.events.map((e) => EventIndex.toJSON(e));
    }
    if (message.vpDstCache?.length) {
      obj.vpDstCache = message.vpDstCache.map((e) =>
        VotingPowerDistCacheBlkHeight.toJSON(e),
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GenesisState>, I>>(
    base?: I,
  ): GenesisState {
    return GenesisState.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GenesisState>, I>>(
    object: I,
  ): GenesisState {
    const message = createBaseGenesisState();
    message.params = object.params?.map((e) => Params.fromPartial(e)) || [];
    message.finalityProviders =
      object.finalityProviders?.map((e) => FinalityProvider.fromPartial(e)) ||
      [];
    message.btcDelegations =
      object.btcDelegations?.map((e) => BTCDelegation.fromPartial(e)) || [];
    message.votingPowers =
      object.votingPowers?.map((e) => VotingPowerFP.fromPartial(e)) || [];
    message.blockHeightChains =
      object.blockHeightChains?.map((e) =>
        BlockHeightBbnToBtc.fromPartial(e),
      ) || [];
    message.btcDelegators =
      object.btcDelegators?.map((e) => BTCDelegator.fromPartial(e)) || [];
    message.events = object.events?.map((e) => EventIndex.fromPartial(e)) || [];
    message.vpDstCache =
      object.vpDstCache?.map((e) =>
        VotingPowerDistCacheBlkHeight.fromPartial(e),
      ) || [];
    return message;
  },
};

function createBaseVotingPowerFP(): VotingPowerFP {
  return { blockHeight: 0, fpBtcPk: new Uint8Array(0), votingPower: 0 };
}

export const VotingPowerFP: MessageFns<VotingPowerFP> = {
  encode(
    message: VotingPowerFP,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.blockHeight !== 0) {
      writer.uint32(8).uint64(message.blockHeight);
    }
    if (message.fpBtcPk.length !== 0) {
      writer.uint32(18).bytes(message.fpBtcPk);
    }
    if (message.votingPower !== 0) {
      writer.uint32(24).uint64(message.votingPower);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): VotingPowerFP {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseVotingPowerFP();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.blockHeight = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fpBtcPk = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.votingPower = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): VotingPowerFP {
    return {
      blockHeight: isSet(object.blockHeight)
        ? globalThis.Number(object.blockHeight)
        : 0,
      fpBtcPk: isSet(object.fpBtcPk)
        ? bytesFromBase64(object.fpBtcPk)
        : new Uint8Array(0),
      votingPower: isSet(object.votingPower)
        ? globalThis.Number(object.votingPower)
        : 0,
    };
  },

  toJSON(message: VotingPowerFP): unknown {
    const obj: any = {};
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.fpBtcPk.length !== 0) {
      obj.fpBtcPk = base64FromBytes(message.fpBtcPk);
    }
    if (message.votingPower !== 0) {
      obj.votingPower = Math.round(message.votingPower);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<VotingPowerFP>, I>>(
    base?: I,
  ): VotingPowerFP {
    return VotingPowerFP.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<VotingPowerFP>, I>>(
    object: I,
  ): VotingPowerFP {
    const message = createBaseVotingPowerFP();
    message.blockHeight = object.blockHeight ?? 0;
    message.fpBtcPk = object.fpBtcPk ?? new Uint8Array(0);
    message.votingPower = object.votingPower ?? 0;
    return message;
  },
};

function createBaseVotingPowerDistCacheBlkHeight(): VotingPowerDistCacheBlkHeight {
  return { blockHeight: 0, vpDistribution: undefined };
}

export const VotingPowerDistCacheBlkHeight: MessageFns<VotingPowerDistCacheBlkHeight> =
  {
    encode(
      message: VotingPowerDistCacheBlkHeight,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.blockHeight !== 0) {
        writer.uint32(8).uint64(message.blockHeight);
      }
      if (message.vpDistribution !== undefined) {
        VotingPowerDistCache.encode(
          message.vpDistribution,
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): VotingPowerDistCacheBlkHeight {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseVotingPowerDistCacheBlkHeight();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.blockHeight = longToNumber(reader.uint64());
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.vpDistribution = VotingPowerDistCache.decode(
              reader,
              reader.uint32(),
            );
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): VotingPowerDistCacheBlkHeight {
      return {
        blockHeight: isSet(object.blockHeight)
          ? globalThis.Number(object.blockHeight)
          : 0,
        vpDistribution: isSet(object.vpDistribution)
          ? VotingPowerDistCache.fromJSON(object.vpDistribution)
          : undefined,
      };
    },

    toJSON(message: VotingPowerDistCacheBlkHeight): unknown {
      const obj: any = {};
      if (message.blockHeight !== 0) {
        obj.blockHeight = Math.round(message.blockHeight);
      }
      if (message.vpDistribution !== undefined) {
        obj.vpDistribution = VotingPowerDistCache.toJSON(
          message.vpDistribution,
        );
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<VotingPowerDistCacheBlkHeight>, I>>(
      base?: I,
    ): VotingPowerDistCacheBlkHeight {
      return VotingPowerDistCacheBlkHeight.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<VotingPowerDistCacheBlkHeight>, I>>(
      object: I,
    ): VotingPowerDistCacheBlkHeight {
      const message = createBaseVotingPowerDistCacheBlkHeight();
      message.blockHeight = object.blockHeight ?? 0;
      message.vpDistribution =
        object.vpDistribution !== undefined && object.vpDistribution !== null
          ? VotingPowerDistCache.fromPartial(object.vpDistribution)
          : undefined;
      return message;
    },
  };

function createBaseBlockHeightBbnToBtc(): BlockHeightBbnToBtc {
  return { blockHeightBbn: 0, blockHeightBtc: 0 };
}

export const BlockHeightBbnToBtc: MessageFns<BlockHeightBbnToBtc> = {
  encode(
    message: BlockHeightBbnToBtc,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.blockHeightBbn !== 0) {
      writer.uint32(8).uint64(message.blockHeightBbn);
    }
    if (message.blockHeightBtc !== 0) {
      writer.uint32(16).uint32(message.blockHeightBtc);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): BlockHeightBbnToBtc {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlockHeightBbnToBtc();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.blockHeightBbn = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.blockHeightBtc = reader.uint32();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlockHeightBbnToBtc {
    return {
      blockHeightBbn: isSet(object.blockHeightBbn)
        ? globalThis.Number(object.blockHeightBbn)
        : 0,
      blockHeightBtc: isSet(object.blockHeightBtc)
        ? globalThis.Number(object.blockHeightBtc)
        : 0,
    };
  },

  toJSON(message: BlockHeightBbnToBtc): unknown {
    const obj: any = {};
    if (message.blockHeightBbn !== 0) {
      obj.blockHeightBbn = Math.round(message.blockHeightBbn);
    }
    if (message.blockHeightBtc !== 0) {
      obj.blockHeightBtc = Math.round(message.blockHeightBtc);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlockHeightBbnToBtc>, I>>(
    base?: I,
  ): BlockHeightBbnToBtc {
    return BlockHeightBbnToBtc.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlockHeightBbnToBtc>, I>>(
    object: I,
  ): BlockHeightBbnToBtc {
    const message = createBaseBlockHeightBbnToBtc();
    message.blockHeightBbn = object.blockHeightBbn ?? 0;
    message.blockHeightBtc = object.blockHeightBtc ?? 0;
    return message;
  },
};

function createBaseBTCDelegator(): BTCDelegator {
  return {
    idx: undefined,
    fpBtcPk: new Uint8Array(0),
    delBtcPk: new Uint8Array(0),
  };
}

export const BTCDelegator: MessageFns<BTCDelegator> = {
  encode(
    message: BTCDelegator,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.idx !== undefined) {
      BTCDelegatorDelegationIndex.encode(
        message.idx,
        writer.uint32(10).fork(),
      ).join();
    }
    if (message.fpBtcPk.length !== 0) {
      writer.uint32(18).bytes(message.fpBtcPk);
    }
    if (message.delBtcPk.length !== 0) {
      writer.uint32(26).bytes(message.delBtcPk);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): BTCDelegator {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBTCDelegator();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.idx = BTCDelegatorDelegationIndex.decode(
            reader,
            reader.uint32(),
          );
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fpBtcPk = reader.bytes();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.delBtcPk = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BTCDelegator {
    return {
      idx: isSet(object.idx)
        ? BTCDelegatorDelegationIndex.fromJSON(object.idx)
        : undefined,
      fpBtcPk: isSet(object.fpBtcPk)
        ? bytesFromBase64(object.fpBtcPk)
        : new Uint8Array(0),
      delBtcPk: isSet(object.delBtcPk)
        ? bytesFromBase64(object.delBtcPk)
        : new Uint8Array(0),
    };
  },

  toJSON(message: BTCDelegator): unknown {
    const obj: any = {};
    if (message.idx !== undefined) {
      obj.idx = BTCDelegatorDelegationIndex.toJSON(message.idx);
    }
    if (message.fpBtcPk.length !== 0) {
      obj.fpBtcPk = base64FromBytes(message.fpBtcPk);
    }
    if (message.delBtcPk.length !== 0) {
      obj.delBtcPk = base64FromBytes(message.delBtcPk);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BTCDelegator>, I>>(
    base?: I,
  ): BTCDelegator {
    return BTCDelegator.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BTCDelegator>, I>>(
    object: I,
  ): BTCDelegator {
    const message = createBaseBTCDelegator();
    message.idx =
      object.idx !== undefined && object.idx !== null
        ? BTCDelegatorDelegationIndex.fromPartial(object.idx)
        : undefined;
    message.fpBtcPk = object.fpBtcPk ?? new Uint8Array(0);
    message.delBtcPk = object.delBtcPk ?? new Uint8Array(0);
    return message;
  },
};

function createBaseEventIndex(): EventIndex {
  return { idx: 0, blockHeightBtc: 0, event: undefined };
}

export const EventIndex: MessageFns<EventIndex> = {
  encode(
    message: EventIndex,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.idx !== 0) {
      writer.uint32(8).uint64(message.idx);
    }
    if (message.blockHeightBtc !== 0) {
      writer.uint32(16).uint32(message.blockHeightBtc);
    }
    if (message.event !== undefined) {
      EventPowerDistUpdate.encode(
        message.event,
        writer.uint32(26).fork(),
      ).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): EventIndex {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseEventIndex();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.idx = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.blockHeightBtc = reader.uint32();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.event = EventPowerDistUpdate.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): EventIndex {
    return {
      idx: isSet(object.idx) ? globalThis.Number(object.idx) : 0,
      blockHeightBtc: isSet(object.blockHeightBtc)
        ? globalThis.Number(object.blockHeightBtc)
        : 0,
      event: isSet(object.event)
        ? EventPowerDistUpdate.fromJSON(object.event)
        : undefined,
    };
  },

  toJSON(message: EventIndex): unknown {
    const obj: any = {};
    if (message.idx !== 0) {
      obj.idx = Math.round(message.idx);
    }
    if (message.blockHeightBtc !== 0) {
      obj.blockHeightBtc = Math.round(message.blockHeightBtc);
    }
    if (message.event !== undefined) {
      obj.event = EventPowerDistUpdate.toJSON(message.event);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<EventIndex>, I>>(base?: I): EventIndex {
    return EventIndex.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<EventIndex>, I>>(
    object: I,
  ): EventIndex {
    const message = createBaseEventIndex();
    message.idx = object.idx ?? 0;
    message.blockHeightBtc = object.blockHeightBtc ?? 0;
    message.event =
      object.event !== undefined && object.event !== null
        ? EventPowerDistUpdate.fromPartial(object.event)
        : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
