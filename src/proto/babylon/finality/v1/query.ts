// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/finality/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  PageRequest,
  PageResponse,
} from "../../../cosmos/base/query/v1beta1/pagination";
import {
  Evidence,
  FinalityProviderSigningInfo,
  IndexedBlock,
} from "./finality";
import { Params } from "./params";

export const protobufPackage = "babylon.finality.v1";

/** QueriedBlockStatus is the status of blocks that the querier wants to query. */
export enum QueriedBlockStatus {
  /** NON_FINALIZED - NON_FINALIZED means the block is not finalised */
  NON_FINALIZED = 0,
  /** FINALIZED - FINALIZED means the block is finalized */
  FINALIZED = 1,
  /** ANY - ANY means the block can be in any status */
  ANY = 2,
  UNRECOGNIZED = -1,
}

export function queriedBlockStatusFromJSON(object: any): QueriedBlockStatus {
  switch (object) {
    case 0:
    case "NON_FINALIZED":
      return QueriedBlockStatus.NON_FINALIZED;
    case 1:
    case "FINALIZED":
      return QueriedBlockStatus.FINALIZED;
    case 2:
    case "ANY":
      return QueriedBlockStatus.ANY;
    case -1:
    case "UNRECOGNIZED":
    default:
      return QueriedBlockStatus.UNRECOGNIZED;
  }
}

export function queriedBlockStatusToJSON(object: QueriedBlockStatus): string {
  switch (object) {
    case QueriedBlockStatus.NON_FINALIZED:
      return "NON_FINALIZED";
    case QueriedBlockStatus.FINALIZED:
      return "FINALIZED";
    case QueriedBlockStatus.ANY:
      return "ANY";
    case QueriedBlockStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

/** QueryParamsRequest is request type for the Query/Params RPC method. */
export interface QueryParamsRequest {}

/** QueryParamsResponse is response type for the Query/Params RPC method. */
export interface QueryParamsResponse {
  /** params holds all the parameters of this module. */
  params: Params | undefined;
}

/**
 * QueryListPublicRandomnessRequest is the request type for the
 * Query/ListPublicRandomness RPC method.
 */
export interface QueryListPublicRandomnessRequest {
  /** fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider */
  fpBtcPkHex: string;
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryListPublicRandomnessResponse is the response type for the
 * Query/ListPublicRandomness RPC method.
 */
export interface QueryListPublicRandomnessResponse {
  /**
   * pub_rand_map is the map where the key is the height and the value
   * is the public randomness at this height for the given finality provider
   */
  pubRandMap: { [key: number]: Uint8Array };
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

export interface QueryListPublicRandomnessResponse_PubRandMapEntry {
  key: number;
  value: Uint8Array;
}

/** PubRandCommitResponse is the response type for a public randomness commitment */
export interface PubRandCommitResponse {
  /** num_pub_rand is the number of committed public randomness */
  numPubRand: number;
  /** commitment is the value of the commitment */
  commitment: Uint8Array;
}

/**
 * QueryListPubRandCommitRequest is the request type for the
 * Query/ListPubRandCommit RPC method.
 */
export interface QueryListPubRandCommitRequest {
  /** fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK of the finality provider */
  fpBtcPkHex: string;
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryListPubRandCommitResponse is the response type for the
 * Query/ListPubRandCommit RPC method.
 */
export interface QueryListPubRandCommitResponse {
  /**
   * pub_rand_commit_map is the map where the key is the start height and the value
   * is the public randomness commitment at this height for the given finality provider
   */
  pubRandCommitMap: { [key: number]: PubRandCommitResponse };
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

export interface QueryListPubRandCommitResponse_PubRandCommitMapEntry {
  key: number;
  value: PubRandCommitResponse | undefined;
}

/**
 * QueryBlockRequest is the request type for the
 * Query/Block RPC method.
 */
export interface QueryBlockRequest {
  /** height is the height of the Babylon block */
  height: number;
}

/**
 * QueryBlockResponse is the response type for the
 * Query/Block RPC method.
 */
export interface QueryBlockResponse {
  /** block is the Babylon at the given height */
  block: IndexedBlock | undefined;
}

/**
 * QueryListBlocksRequest is the request type for the
 * Query/ListBlocks RPC method.
 */
export interface QueryListBlocksRequest {
  /** status indicates the status of blocks that the querier wants to query */
  status: QueriedBlockStatus;
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryListBlocksResponse is the response type for the
 * Query/ListBlocks RPC method.
 */
export interface QueryListBlocksResponse {
  /** blocks is the list of blocks at the given status */
  blocks: IndexedBlock[];
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryVotesAtHeightRequest is the request type for the
 * Query/VotesAtHeight RPC method.
 */
export interface QueryVotesAtHeightRequest {
  /** height defines at which height to query the finality providers. */
  height: number;
}

/**
 * QueryVotesAtHeightResponse is the response type for the
 * Query/VotesAtHeight RPC method.
 */
export interface QueryVotesAtHeightResponse {
  /**
   * btc_pk is the Bitcoin secp256k1 PK of finality providers who have signed the block at given height.
   * the PK follows encoding in BIP-340 spec
   */
  btcPks: Uint8Array[];
}

/**
 * QueryEvidenceRequest is the request type for the
 * Query/Evidence RPC method.
 */
export interface QueryEvidenceRequest {
  /**
   * fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK
   * (in BIP340 format) of the finality provider
   */
  fpBtcPkHex: string;
}

/**
 * QueryEvidenceResponse is the response type for the
 * Query/Evidence RPC method.
 */
export interface QueryEvidenceResponse {
  evidence: Evidence | undefined;
}

/**
 * QueryListEvidencesRequest is the request type for the
 * Query/ListEvidences RPC method.
 */
export interface QueryListEvidencesRequest {
  /**
   * start_height is the starting height that the querier specifies
   * such that the RPC will only return evidences since this height
   */
  startHeight: number;
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryListEvidencesResponse is the response type for the
 * Query/ListEvidences RPC method.
 */
export interface QueryListEvidencesResponse {
  /** blocks is the list of evidences */
  evidences: Evidence[];
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QuerySigningInfoRequest is the request type for the Query/SigningInfo RPC
 * method
 */
export interface QuerySigningInfoRequest {
  /**
   * fp_btc_pk_hex is the hex str of Bitcoin secp256k1 PK
   * (in BIP340 format) of the finality provider
   */
  fpBtcPkHex: string;
}

/**
 * QuerySigningInfoResponse is the response type for the Query/SigningInfo RPC
 * method
 */
export interface QuerySigningInfoResponse {
  /** fp_signing_info is the signing info of requested finality provider BTC public key */
  fpSigningInfo: FinalityProviderSigningInfo | undefined;
}

/**
 * QuerySigningInfosRequest is the request type for the Query/SigningInfos RPC
 * method
 */
export interface QuerySigningInfosRequest {
  pagination: PageRequest | undefined;
}

/**
 * QuerySigningInfosResponse is the response type for the Query/SigningInfos RPC
 * method
 */
export interface QuerySigningInfosResponse {
  /** info is the signing info of all finality providers with signing info */
  fpSigningInfos: FinalityProviderSigningInfo[];
  pagination: PageResponse | undefined;
}

function createBaseQueryParamsRequest(): QueryParamsRequest {
  return {};
}

export const QueryParamsRequest: MessageFns<QueryParamsRequest> = {
  encode(
    _: QueryParamsRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryParamsRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): QueryParamsRequest {
    return {};
  },

  toJSON(_: QueryParamsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(
    base?: I,
  ): QueryParamsRequest {
    return QueryParamsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsRequest>, I>>(
    _: I,
  ): QueryParamsRequest {
    const message = createBaseQueryParamsRequest();
    return message;
  },
};

function createBaseQueryParamsResponse(): QueryParamsResponse {
  return { params: undefined };
}

export const QueryParamsResponse: MessageFns<QueryParamsResponse> = {
  encode(
    message: QueryParamsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryParamsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryParamsResponse {
    return {
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: QueryParamsResponse): unknown {
    const obj: any = {};
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(
    base?: I,
  ): QueryParamsResponse {
    return QueryParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryParamsResponse>, I>>(
    object: I,
  ): QueryParamsResponse {
    const message = createBaseQueryParamsResponse();
    message.params =
      object.params !== undefined && object.params !== null
        ? Params.fromPartial(object.params)
        : undefined;
    return message;
  },
};

function createBaseQueryListPublicRandomnessRequest(): QueryListPublicRandomnessRequest {
  return { fpBtcPkHex: "", pagination: undefined };
}

export const QueryListPublicRandomnessRequest: MessageFns<QueryListPublicRandomnessRequest> =
  {
    encode(
      message: QueryListPublicRandomnessRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.fpBtcPkHex !== "") {
        writer.uint32(10).string(message.fpBtcPkHex);
      }
      if (message.pagination !== undefined) {
        PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryListPublicRandomnessRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryListPublicRandomnessRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.fpBtcPkHex = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageRequest.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryListPublicRandomnessRequest {
      return {
        fpBtcPkHex: isSet(object.fpBtcPkHex)
          ? globalThis.String(object.fpBtcPkHex)
          : "",
        pagination: isSet(object.pagination)
          ? PageRequest.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryListPublicRandomnessRequest): unknown {
      const obj: any = {};
      if (message.fpBtcPkHex !== "") {
        obj.fpBtcPkHex = message.fpBtcPkHex;
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageRequest.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryListPublicRandomnessRequest>, I>>(
      base?: I,
    ): QueryListPublicRandomnessRequest {
      return QueryListPublicRandomnessRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryListPublicRandomnessRequest>, I>,
    >(object: I): QueryListPublicRandomnessRequest {
      const message = createBaseQueryListPublicRandomnessRequest();
      message.fpBtcPkHex = object.fpBtcPkHex ?? "";
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageRequest.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseQueryListPublicRandomnessResponse(): QueryListPublicRandomnessResponse {
  return { pubRandMap: {}, pagination: undefined };
}

export const QueryListPublicRandomnessResponse: MessageFns<QueryListPublicRandomnessResponse> =
  {
    encode(
      message: QueryListPublicRandomnessResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      Object.entries(message.pubRandMap).forEach(([key, value]) => {
        QueryListPublicRandomnessResponse_PubRandMapEntry.encode(
          { key: key as any, value },
          writer.uint32(10).fork(),
        ).join();
      });
      if (message.pagination !== undefined) {
        PageResponse.encode(
          message.pagination,
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryListPublicRandomnessResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryListPublicRandomnessResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            const entry1 =
              QueryListPublicRandomnessResponse_PubRandMapEntry.decode(
                reader,
                reader.uint32(),
              );
            if (entry1.value !== undefined) {
              message.pubRandMap[entry1.key] = entry1.value;
            }
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageResponse.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryListPublicRandomnessResponse {
      return {
        pubRandMap: isObject(object.pubRandMap)
          ? Object.entries(object.pubRandMap).reduce<{
              [key: number]: Uint8Array;
            }>((acc, [key, value]) => {
              acc[globalThis.Number(key)] = bytesFromBase64(value as string);
              return acc;
            }, {})
          : {},
        pagination: isSet(object.pagination)
          ? PageResponse.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryListPublicRandomnessResponse): unknown {
      const obj: any = {};
      if (message.pubRandMap) {
        const entries = Object.entries(message.pubRandMap);
        if (entries.length > 0) {
          obj.pubRandMap = {};
          entries.forEach(([k, v]) => {
            obj.pubRandMap[k] = base64FromBytes(v);
          });
        }
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageResponse.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryListPublicRandomnessResponse>, I>>(
      base?: I,
    ): QueryListPublicRandomnessResponse {
      return QueryListPublicRandomnessResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryListPublicRandomnessResponse>, I>,
    >(object: I): QueryListPublicRandomnessResponse {
      const message = createBaseQueryListPublicRandomnessResponse();
      message.pubRandMap = Object.entries(object.pubRandMap ?? {}).reduce<{
        [key: number]: Uint8Array;
      }>((acc, [key, value]) => {
        if (value !== undefined) {
          acc[globalThis.Number(key)] = value;
        }
        return acc;
      }, {});
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageResponse.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseQueryListPublicRandomnessResponse_PubRandMapEntry(): QueryListPublicRandomnessResponse_PubRandMapEntry {
  return { key: 0, value: new Uint8Array(0) };
}

export const QueryListPublicRandomnessResponse_PubRandMapEntry: MessageFns<QueryListPublicRandomnessResponse_PubRandMapEntry> =
  {
    encode(
      message: QueryListPublicRandomnessResponse_PubRandMapEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== 0) {
        writer.uint32(8).uint64(message.key);
      }
      if (message.value.length !== 0) {
        writer.uint32(18).bytes(message.value);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryListPublicRandomnessResponse_PubRandMapEntry {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseQueryListPublicRandomnessResponse_PubRandMapEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.key = longToNumber(reader.uint64());
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.value = reader.bytes();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryListPublicRandomnessResponse_PubRandMapEntry {
      return {
        key: isSet(object.key) ? globalThis.Number(object.key) : 0,
        value: isSet(object.value)
          ? bytesFromBase64(object.value)
          : new Uint8Array(0),
      };
    },

    toJSON(
      message: QueryListPublicRandomnessResponse_PubRandMapEntry,
    ): unknown {
      const obj: any = {};
      if (message.key !== 0) {
        obj.key = Math.round(message.key);
      }
      if (message.value.length !== 0) {
        obj.value = base64FromBytes(message.value);
      }
      return obj;
    },

    create<
      I extends Exact<
        DeepPartial<QueryListPublicRandomnessResponse_PubRandMapEntry>,
        I
      >,
    >(base?: I): QueryListPublicRandomnessResponse_PubRandMapEntry {
      return QueryListPublicRandomnessResponse_PubRandMapEntry.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<
        DeepPartial<QueryListPublicRandomnessResponse_PubRandMapEntry>,
        I
      >,
    >(object: I): QueryListPublicRandomnessResponse_PubRandMapEntry {
      const message =
        createBaseQueryListPublicRandomnessResponse_PubRandMapEntry();
      message.key = object.key ?? 0;
      message.value = object.value ?? new Uint8Array(0);
      return message;
    },
  };

function createBasePubRandCommitResponse(): PubRandCommitResponse {
  return { numPubRand: 0, commitment: new Uint8Array(0) };
}

export const PubRandCommitResponse: MessageFns<PubRandCommitResponse> = {
  encode(
    message: PubRandCommitResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.numPubRand !== 0) {
      writer.uint32(8).uint64(message.numPubRand);
    }
    if (message.commitment.length !== 0) {
      writer.uint32(18).bytes(message.commitment);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): PubRandCommitResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBasePubRandCommitResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.numPubRand = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.commitment = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): PubRandCommitResponse {
    return {
      numPubRand: isSet(object.numPubRand)
        ? globalThis.Number(object.numPubRand)
        : 0,
      commitment: isSet(object.commitment)
        ? bytesFromBase64(object.commitment)
        : new Uint8Array(0),
    };
  },

  toJSON(message: PubRandCommitResponse): unknown {
    const obj: any = {};
    if (message.numPubRand !== 0) {
      obj.numPubRand = Math.round(message.numPubRand);
    }
    if (message.commitment.length !== 0) {
      obj.commitment = base64FromBytes(message.commitment);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<PubRandCommitResponse>, I>>(
    base?: I,
  ): PubRandCommitResponse {
    return PubRandCommitResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<PubRandCommitResponse>, I>>(
    object: I,
  ): PubRandCommitResponse {
    const message = createBasePubRandCommitResponse();
    message.numPubRand = object.numPubRand ?? 0;
    message.commitment = object.commitment ?? new Uint8Array(0);
    return message;
  },
};

function createBaseQueryListPubRandCommitRequest(): QueryListPubRandCommitRequest {
  return { fpBtcPkHex: "", pagination: undefined };
}

export const QueryListPubRandCommitRequest: MessageFns<QueryListPubRandCommitRequest> =
  {
    encode(
      message: QueryListPubRandCommitRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.fpBtcPkHex !== "") {
        writer.uint32(10).string(message.fpBtcPkHex);
      }
      if (message.pagination !== undefined) {
        PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryListPubRandCommitRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryListPubRandCommitRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.fpBtcPkHex = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageRequest.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryListPubRandCommitRequest {
      return {
        fpBtcPkHex: isSet(object.fpBtcPkHex)
          ? globalThis.String(object.fpBtcPkHex)
          : "",
        pagination: isSet(object.pagination)
          ? PageRequest.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryListPubRandCommitRequest): unknown {
      const obj: any = {};
      if (message.fpBtcPkHex !== "") {
        obj.fpBtcPkHex = message.fpBtcPkHex;
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageRequest.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryListPubRandCommitRequest>, I>>(
      base?: I,
    ): QueryListPubRandCommitRequest {
      return QueryListPubRandCommitRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryListPubRandCommitRequest>, I>>(
      object: I,
    ): QueryListPubRandCommitRequest {
      const message = createBaseQueryListPubRandCommitRequest();
      message.fpBtcPkHex = object.fpBtcPkHex ?? "";
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageRequest.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseQueryListPubRandCommitResponse(): QueryListPubRandCommitResponse {
  return { pubRandCommitMap: {}, pagination: undefined };
}

export const QueryListPubRandCommitResponse: MessageFns<QueryListPubRandCommitResponse> =
  {
    encode(
      message: QueryListPubRandCommitResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      Object.entries(message.pubRandCommitMap).forEach(([key, value]) => {
        QueryListPubRandCommitResponse_PubRandCommitMapEntry.encode(
          { key: key as any, value },
          writer.uint32(10).fork(),
        ).join();
      });
      if (message.pagination !== undefined) {
        PageResponse.encode(
          message.pagination,
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryListPubRandCommitResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryListPubRandCommitResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            const entry1 =
              QueryListPubRandCommitResponse_PubRandCommitMapEntry.decode(
                reader,
                reader.uint32(),
              );
            if (entry1.value !== undefined) {
              message.pubRandCommitMap[entry1.key] = entry1.value;
            }
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageResponse.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryListPubRandCommitResponse {
      return {
        pubRandCommitMap: isObject(object.pubRandCommitMap)
          ? Object.entries(object.pubRandCommitMap).reduce<{
              [key: number]: PubRandCommitResponse;
            }>((acc, [key, value]) => {
              acc[globalThis.Number(key)] =
                PubRandCommitResponse.fromJSON(value);
              return acc;
            }, {})
          : {},
        pagination: isSet(object.pagination)
          ? PageResponse.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryListPubRandCommitResponse): unknown {
      const obj: any = {};
      if (message.pubRandCommitMap) {
        const entries = Object.entries(message.pubRandCommitMap);
        if (entries.length > 0) {
          obj.pubRandCommitMap = {};
          entries.forEach(([k, v]) => {
            obj.pubRandCommitMap[k] = PubRandCommitResponse.toJSON(v);
          });
        }
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageResponse.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryListPubRandCommitResponse>, I>>(
      base?: I,
    ): QueryListPubRandCommitResponse {
      return QueryListPubRandCommitResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryListPubRandCommitResponse>, I>,
    >(object: I): QueryListPubRandCommitResponse {
      const message = createBaseQueryListPubRandCommitResponse();
      message.pubRandCommitMap = Object.entries(
        object.pubRandCommitMap ?? {},
      ).reduce<{ [key: number]: PubRandCommitResponse }>(
        (acc, [key, value]) => {
          if (value !== undefined) {
            acc[globalThis.Number(key)] =
              PubRandCommitResponse.fromPartial(value);
          }
          return acc;
        },
        {},
      );
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageResponse.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseQueryListPubRandCommitResponse_PubRandCommitMapEntry(): QueryListPubRandCommitResponse_PubRandCommitMapEntry {
  return { key: 0, value: undefined };
}

export const QueryListPubRandCommitResponse_PubRandCommitMapEntry: MessageFns<QueryListPubRandCommitResponse_PubRandCommitMapEntry> =
  {
    encode(
      message: QueryListPubRandCommitResponse_PubRandCommitMapEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== 0) {
        writer.uint32(8).uint64(message.key);
      }
      if (message.value !== undefined) {
        PubRandCommitResponse.encode(
          message.value,
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryListPubRandCommitResponse_PubRandCommitMapEntry {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseQueryListPubRandCommitResponse_PubRandCommitMapEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.key = longToNumber(reader.uint64());
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.value = PubRandCommitResponse.decode(
              reader,
              reader.uint32(),
            );
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(
      object: any,
    ): QueryListPubRandCommitResponse_PubRandCommitMapEntry {
      return {
        key: isSet(object.key) ? globalThis.Number(object.key) : 0,
        value: isSet(object.value)
          ? PubRandCommitResponse.fromJSON(object.value)
          : undefined,
      };
    },

    toJSON(
      message: QueryListPubRandCommitResponse_PubRandCommitMapEntry,
    ): unknown {
      const obj: any = {};
      if (message.key !== 0) {
        obj.key = Math.round(message.key);
      }
      if (message.value !== undefined) {
        obj.value = PubRandCommitResponse.toJSON(message.value);
      }
      return obj;
    },

    create<
      I extends Exact<
        DeepPartial<QueryListPubRandCommitResponse_PubRandCommitMapEntry>,
        I
      >,
    >(base?: I): QueryListPubRandCommitResponse_PubRandCommitMapEntry {
      return QueryListPubRandCommitResponse_PubRandCommitMapEntry.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<
        DeepPartial<QueryListPubRandCommitResponse_PubRandCommitMapEntry>,
        I
      >,
    >(object: I): QueryListPubRandCommitResponse_PubRandCommitMapEntry {
      const message =
        createBaseQueryListPubRandCommitResponse_PubRandCommitMapEntry();
      message.key = object.key ?? 0;
      message.value =
        object.value !== undefined && object.value !== null
          ? PubRandCommitResponse.fromPartial(object.value)
          : undefined;
      return message;
    },
  };

function createBaseQueryBlockRequest(): QueryBlockRequest {
  return { height: 0 };
}

export const QueryBlockRequest: MessageFns<QueryBlockRequest> = {
  encode(
    message: QueryBlockRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.height !== 0) {
      writer.uint32(8).uint64(message.height);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): QueryBlockRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBlockRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.height = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBlockRequest {
    return {
      height: isSet(object.height) ? globalThis.Number(object.height) : 0,
    };
  },

  toJSON(message: QueryBlockRequest): unknown {
    const obj: any = {};
    if (message.height !== 0) {
      obj.height = Math.round(message.height);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBlockRequest>, I>>(
    base?: I,
  ): QueryBlockRequest {
    return QueryBlockRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBlockRequest>, I>>(
    object: I,
  ): QueryBlockRequest {
    const message = createBaseQueryBlockRequest();
    message.height = object.height ?? 0;
    return message;
  },
};

function createBaseQueryBlockResponse(): QueryBlockResponse {
  return { block: undefined };
}

export const QueryBlockResponse: MessageFns<QueryBlockResponse> = {
  encode(
    message: QueryBlockResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.block !== undefined) {
      IndexedBlock.encode(message.block, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryBlockResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryBlockResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.block = IndexedBlock.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryBlockResponse {
    return {
      block: isSet(object.block)
        ? IndexedBlock.fromJSON(object.block)
        : undefined,
    };
  },

  toJSON(message: QueryBlockResponse): unknown {
    const obj: any = {};
    if (message.block !== undefined) {
      obj.block = IndexedBlock.toJSON(message.block);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryBlockResponse>, I>>(
    base?: I,
  ): QueryBlockResponse {
    return QueryBlockResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryBlockResponse>, I>>(
    object: I,
  ): QueryBlockResponse {
    const message = createBaseQueryBlockResponse();
    message.block =
      object.block !== undefined && object.block !== null
        ? IndexedBlock.fromPartial(object.block)
        : undefined;
    return message;
  },
};

function createBaseQueryListBlocksRequest(): QueryListBlocksRequest {
  return { status: 0, pagination: undefined };
}

export const QueryListBlocksRequest: MessageFns<QueryListBlocksRequest> = {
  encode(
    message: QueryListBlocksRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryListBlocksRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListBlocksRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListBlocksRequest {
    return {
      status: isSet(object.status)
        ? queriedBlockStatusFromJSON(object.status)
        : 0,
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryListBlocksRequest): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = queriedBlockStatusToJSON(message.status);
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListBlocksRequest>, I>>(
    base?: I,
  ): QueryListBlocksRequest {
    return QueryListBlocksRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListBlocksRequest>, I>>(
    object: I,
  ): QueryListBlocksRequest {
    const message = createBaseQueryListBlocksRequest();
    message.status = object.status ?? 0;
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryListBlocksResponse(): QueryListBlocksResponse {
  return { blocks: [], pagination: undefined };
}

export const QueryListBlocksResponse: MessageFns<QueryListBlocksResponse> = {
  encode(
    message: QueryListBlocksResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    for (const v of message.blocks) {
      IndexedBlock.encode(v!, writer.uint32(10).fork()).join();
    }
    if (message.pagination !== undefined) {
      PageResponse.encode(message.pagination, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryListBlocksResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryListBlocksResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.blocks.push(IndexedBlock.decode(reader, reader.uint32()));
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.pagination = PageResponse.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryListBlocksResponse {
    return {
      blocks: globalThis.Array.isArray(object?.blocks)
        ? object.blocks.map((e: any) => IndexedBlock.fromJSON(e))
        : [],
      pagination: isSet(object.pagination)
        ? PageResponse.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QueryListBlocksResponse): unknown {
    const obj: any = {};
    if (message.blocks?.length) {
      obj.blocks = message.blocks.map((e) => IndexedBlock.toJSON(e));
    }
    if (message.pagination !== undefined) {
      obj.pagination = PageResponse.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryListBlocksResponse>, I>>(
    base?: I,
  ): QueryListBlocksResponse {
    return QueryListBlocksResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryListBlocksResponse>, I>>(
    object: I,
  ): QueryListBlocksResponse {
    const message = createBaseQueryListBlocksResponse();
    message.blocks =
      object.blocks?.map((e) => IndexedBlock.fromPartial(e)) || [];
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageResponse.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQueryVotesAtHeightRequest(): QueryVotesAtHeightRequest {
  return { height: 0 };
}

export const QueryVotesAtHeightRequest: MessageFns<QueryVotesAtHeightRequest> =
  {
    encode(
      message: QueryVotesAtHeightRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.height !== 0) {
        writer.uint32(8).uint64(message.height);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryVotesAtHeightRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryVotesAtHeightRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.height = longToNumber(reader.uint64());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryVotesAtHeightRequest {
      return {
        height: isSet(object.height) ? globalThis.Number(object.height) : 0,
      };
    },

    toJSON(message: QueryVotesAtHeightRequest): unknown {
      const obj: any = {};
      if (message.height !== 0) {
        obj.height = Math.round(message.height);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryVotesAtHeightRequest>, I>>(
      base?: I,
    ): QueryVotesAtHeightRequest {
      return QueryVotesAtHeightRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryVotesAtHeightRequest>, I>>(
      object: I,
    ): QueryVotesAtHeightRequest {
      const message = createBaseQueryVotesAtHeightRequest();
      message.height = object.height ?? 0;
      return message;
    },
  };

function createBaseQueryVotesAtHeightResponse(): QueryVotesAtHeightResponse {
  return { btcPks: [] };
}

export const QueryVotesAtHeightResponse: MessageFns<QueryVotesAtHeightResponse> =
  {
    encode(
      message: QueryVotesAtHeightResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.btcPks) {
        writer.uint32(10).bytes(v!);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryVotesAtHeightResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryVotesAtHeightResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.btcPks.push(reader.bytes());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryVotesAtHeightResponse {
      return {
        btcPks: globalThis.Array.isArray(object?.btcPks)
          ? object.btcPks.map((e: any) => bytesFromBase64(e))
          : [],
      };
    },

    toJSON(message: QueryVotesAtHeightResponse): unknown {
      const obj: any = {};
      if (message.btcPks?.length) {
        obj.btcPks = message.btcPks.map((e) => base64FromBytes(e));
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryVotesAtHeightResponse>, I>>(
      base?: I,
    ): QueryVotesAtHeightResponse {
      return QueryVotesAtHeightResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryVotesAtHeightResponse>, I>>(
      object: I,
    ): QueryVotesAtHeightResponse {
      const message = createBaseQueryVotesAtHeightResponse();
      message.btcPks = object.btcPks?.map((e) => e) || [];
      return message;
    },
  };

function createBaseQueryEvidenceRequest(): QueryEvidenceRequest {
  return { fpBtcPkHex: "" };
}

export const QueryEvidenceRequest: MessageFns<QueryEvidenceRequest> = {
  encode(
    message: QueryEvidenceRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fpBtcPkHex !== "") {
      writer.uint32(10).string(message.fpBtcPkHex);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryEvidenceRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEvidenceRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fpBtcPkHex = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEvidenceRequest {
    return {
      fpBtcPkHex: isSet(object.fpBtcPkHex)
        ? globalThis.String(object.fpBtcPkHex)
        : "",
    };
  },

  toJSON(message: QueryEvidenceRequest): unknown {
    const obj: any = {};
    if (message.fpBtcPkHex !== "") {
      obj.fpBtcPkHex = message.fpBtcPkHex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEvidenceRequest>, I>>(
    base?: I,
  ): QueryEvidenceRequest {
    return QueryEvidenceRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEvidenceRequest>, I>>(
    object: I,
  ): QueryEvidenceRequest {
    const message = createBaseQueryEvidenceRequest();
    message.fpBtcPkHex = object.fpBtcPkHex ?? "";
    return message;
  },
};

function createBaseQueryEvidenceResponse(): QueryEvidenceResponse {
  return { evidence: undefined };
}

export const QueryEvidenceResponse: MessageFns<QueryEvidenceResponse> = {
  encode(
    message: QueryEvidenceResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.evidence !== undefined) {
      Evidence.encode(message.evidence, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryEvidenceResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEvidenceResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.evidence = Evidence.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEvidenceResponse {
    return {
      evidence: isSet(object.evidence)
        ? Evidence.fromJSON(object.evidence)
        : undefined,
    };
  },

  toJSON(message: QueryEvidenceResponse): unknown {
    const obj: any = {};
    if (message.evidence !== undefined) {
      obj.evidence = Evidence.toJSON(message.evidence);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEvidenceResponse>, I>>(
    base?: I,
  ): QueryEvidenceResponse {
    return QueryEvidenceResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEvidenceResponse>, I>>(
    object: I,
  ): QueryEvidenceResponse {
    const message = createBaseQueryEvidenceResponse();
    message.evidence =
      object.evidence !== undefined && object.evidence !== null
        ? Evidence.fromPartial(object.evidence)
        : undefined;
    return message;
  },
};

function createBaseQueryListEvidencesRequest(): QueryListEvidencesRequest {
  return { startHeight: 0, pagination: undefined };
}

export const QueryListEvidencesRequest: MessageFns<QueryListEvidencesRequest> =
  {
    encode(
      message: QueryListEvidencesRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.startHeight !== 0) {
        writer.uint32(8).uint64(message.startHeight);
      }
      if (message.pagination !== undefined) {
        PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryListEvidencesRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryListEvidencesRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.startHeight = longToNumber(reader.uint64());
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageRequest.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryListEvidencesRequest {
      return {
        startHeight: isSet(object.startHeight)
          ? globalThis.Number(object.startHeight)
          : 0,
        pagination: isSet(object.pagination)
          ? PageRequest.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryListEvidencesRequest): unknown {
      const obj: any = {};
      if (message.startHeight !== 0) {
        obj.startHeight = Math.round(message.startHeight);
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageRequest.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryListEvidencesRequest>, I>>(
      base?: I,
    ): QueryListEvidencesRequest {
      return QueryListEvidencesRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryListEvidencesRequest>, I>>(
      object: I,
    ): QueryListEvidencesRequest {
      const message = createBaseQueryListEvidencesRequest();
      message.startHeight = object.startHeight ?? 0;
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageRequest.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseQueryListEvidencesResponse(): QueryListEvidencesResponse {
  return { evidences: [], pagination: undefined };
}

export const QueryListEvidencesResponse: MessageFns<QueryListEvidencesResponse> =
  {
    encode(
      message: QueryListEvidencesResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.evidences) {
        Evidence.encode(v!, writer.uint32(10).fork()).join();
      }
      if (message.pagination !== undefined) {
        PageResponse.encode(
          message.pagination,
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryListEvidencesResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryListEvidencesResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.evidences.push(Evidence.decode(reader, reader.uint32()));
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageResponse.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryListEvidencesResponse {
      return {
        evidences: globalThis.Array.isArray(object?.evidences)
          ? object.evidences.map((e: any) => Evidence.fromJSON(e))
          : [],
        pagination: isSet(object.pagination)
          ? PageResponse.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryListEvidencesResponse): unknown {
      const obj: any = {};
      if (message.evidences?.length) {
        obj.evidences = message.evidences.map((e) => Evidence.toJSON(e));
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageResponse.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryListEvidencesResponse>, I>>(
      base?: I,
    ): QueryListEvidencesResponse {
      return QueryListEvidencesResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryListEvidencesResponse>, I>>(
      object: I,
    ): QueryListEvidencesResponse {
      const message = createBaseQueryListEvidencesResponse();
      message.evidences =
        object.evidences?.map((e) => Evidence.fromPartial(e)) || [];
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageResponse.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseQuerySigningInfoRequest(): QuerySigningInfoRequest {
  return { fpBtcPkHex: "" };
}

export const QuerySigningInfoRequest: MessageFns<QuerySigningInfoRequest> = {
  encode(
    message: QuerySigningInfoRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fpBtcPkHex !== "") {
      writer.uint32(10).string(message.fpBtcPkHex);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QuerySigningInfoRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySigningInfoRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fpBtcPkHex = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySigningInfoRequest {
    return {
      fpBtcPkHex: isSet(object.fpBtcPkHex)
        ? globalThis.String(object.fpBtcPkHex)
        : "",
    };
  },

  toJSON(message: QuerySigningInfoRequest): unknown {
    const obj: any = {};
    if (message.fpBtcPkHex !== "") {
      obj.fpBtcPkHex = message.fpBtcPkHex;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySigningInfoRequest>, I>>(
    base?: I,
  ): QuerySigningInfoRequest {
    return QuerySigningInfoRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySigningInfoRequest>, I>>(
    object: I,
  ): QuerySigningInfoRequest {
    const message = createBaseQuerySigningInfoRequest();
    message.fpBtcPkHex = object.fpBtcPkHex ?? "";
    return message;
  },
};

function createBaseQuerySigningInfoResponse(): QuerySigningInfoResponse {
  return { fpSigningInfo: undefined };
}

export const QuerySigningInfoResponse: MessageFns<QuerySigningInfoResponse> = {
  encode(
    message: QuerySigningInfoResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.fpSigningInfo !== undefined) {
      FinalityProviderSigningInfo.encode(
        message.fpSigningInfo,
        writer.uint32(10).fork(),
      ).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QuerySigningInfoResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySigningInfoResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.fpSigningInfo = FinalityProviderSigningInfo.decode(
            reader,
            reader.uint32(),
          );
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySigningInfoResponse {
    return {
      fpSigningInfo: isSet(object.fpSigningInfo)
        ? FinalityProviderSigningInfo.fromJSON(object.fpSigningInfo)
        : undefined,
    };
  },

  toJSON(message: QuerySigningInfoResponse): unknown {
    const obj: any = {};
    if (message.fpSigningInfo !== undefined) {
      obj.fpSigningInfo = FinalityProviderSigningInfo.toJSON(
        message.fpSigningInfo,
      );
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySigningInfoResponse>, I>>(
    base?: I,
  ): QuerySigningInfoResponse {
    return QuerySigningInfoResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySigningInfoResponse>, I>>(
    object: I,
  ): QuerySigningInfoResponse {
    const message = createBaseQuerySigningInfoResponse();
    message.fpSigningInfo =
      object.fpSigningInfo !== undefined && object.fpSigningInfo !== null
        ? FinalityProviderSigningInfo.fromPartial(object.fpSigningInfo)
        : undefined;
    return message;
  },
};

function createBaseQuerySigningInfosRequest(): QuerySigningInfosRequest {
  return { pagination: undefined };
}

export const QuerySigningInfosRequest: MessageFns<QuerySigningInfosRequest> = {
  encode(
    message: QuerySigningInfosRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.pagination !== undefined) {
      PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QuerySigningInfosRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQuerySigningInfosRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.pagination = PageRequest.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QuerySigningInfosRequest {
    return {
      pagination: isSet(object.pagination)
        ? PageRequest.fromJSON(object.pagination)
        : undefined,
    };
  },

  toJSON(message: QuerySigningInfosRequest): unknown {
    const obj: any = {};
    if (message.pagination !== undefined) {
      obj.pagination = PageRequest.toJSON(message.pagination);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QuerySigningInfosRequest>, I>>(
    base?: I,
  ): QuerySigningInfosRequest {
    return QuerySigningInfosRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QuerySigningInfosRequest>, I>>(
    object: I,
  ): QuerySigningInfosRequest {
    const message = createBaseQuerySigningInfosRequest();
    message.pagination =
      object.pagination !== undefined && object.pagination !== null
        ? PageRequest.fromPartial(object.pagination)
        : undefined;
    return message;
  },
};

function createBaseQuerySigningInfosResponse(): QuerySigningInfosResponse {
  return { fpSigningInfos: [], pagination: undefined };
}

export const QuerySigningInfosResponse: MessageFns<QuerySigningInfosResponse> =
  {
    encode(
      message: QuerySigningInfosResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.fpSigningInfos) {
        FinalityProviderSigningInfo.encode(v!, writer.uint32(10).fork()).join();
      }
      if (message.pagination !== undefined) {
        PageResponse.encode(
          message.pagination,
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QuerySigningInfosResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQuerySigningInfosResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.fpSigningInfos.push(
              FinalityProviderSigningInfo.decode(reader, reader.uint32()),
            );
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageResponse.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QuerySigningInfosResponse {
      return {
        fpSigningInfos: globalThis.Array.isArray(object?.fpSigningInfos)
          ? object.fpSigningInfos.map((e: any) =>
              FinalityProviderSigningInfo.fromJSON(e),
            )
          : [],
        pagination: isSet(object.pagination)
          ? PageResponse.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QuerySigningInfosResponse): unknown {
      const obj: any = {};
      if (message.fpSigningInfos?.length) {
        obj.fpSigningInfos = message.fpSigningInfos.map((e) =>
          FinalityProviderSigningInfo.toJSON(e),
        );
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageResponse.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QuerySigningInfosResponse>, I>>(
      base?: I,
    ): QuerySigningInfosResponse {
      return QuerySigningInfosResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QuerySigningInfosResponse>, I>>(
      object: I,
    ): QuerySigningInfosResponse {
      const message = createBaseQuerySigningInfosResponse();
      message.fpSigningInfos =
        object.fpSigningInfos?.map((e) =>
          FinalityProviderSigningInfo.fromPartial(e),
        ) || [];
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageResponse.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

/** Query defines the gRPC querier service. */
export interface Query {
  /** Parameters queries the parameters of the module. */
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse>;
  /**
   * ListPublicRandomness is a range query for public randomness of a given finality provider
   * NOTE: Babylon only has the knowledge of public randomness that is already revealed by
   * finality providers, i.e., the finality provider alreayd provides a finality signature
   * at the corresponding height
   * TODO: remove public randomness storage?
   */
  ListPublicRandomness(
    request: QueryListPublicRandomnessRequest,
  ): Promise<QueryListPublicRandomnessResponse>;
  /** ListPubRandCommit is a range query for public randomness commitments of a given finality provider */
  ListPubRandCommit(
    request: QueryListPubRandCommitRequest,
  ): Promise<QueryListPubRandCommitResponse>;
  /** Block queries a block at a given height */
  Block(request: QueryBlockRequest): Promise<QueryBlockResponse>;
  /** ListBlocks is a range query for blocks at a given status */
  ListBlocks(request: QueryListBlocksRequest): Promise<QueryListBlocksResponse>;
  /** VotesAtHeight queries finality providers who have signed the block at given height. */
  VotesAtHeight(
    request: QueryVotesAtHeightRequest,
  ): Promise<QueryVotesAtHeightResponse>;
  /** Evidence queries the first evidence which can be used for extracting the BTC SK */
  Evidence(request: QueryEvidenceRequest): Promise<QueryEvidenceResponse>;
  /** ListEvidences queries is a range query for evidences */
  ListEvidences(
    request: QueryListEvidencesRequest,
  ): Promise<QueryListEvidencesResponse>;
  /** SigningInfo queries the signing info of given finality provider BTC public key */
  SigningInfo(
    request: QuerySigningInfoRequest,
  ): Promise<QuerySigningInfoResponse>;
  /** SigningInfos queries the signing info of all the active finality providers */
  SigningInfos(
    request: QuerySigningInfosRequest,
  ): Promise<QuerySigningInfosResponse>;
}

export const QueryServiceName = "babylon.finality.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.Params = this.Params.bind(this);
    this.ListPublicRandomness = this.ListPublicRandomness.bind(this);
    this.ListPubRandCommit = this.ListPubRandCommit.bind(this);
    this.Block = this.Block.bind(this);
    this.ListBlocks = this.ListBlocks.bind(this);
    this.VotesAtHeight = this.VotesAtHeight.bind(this);
    this.Evidence = this.Evidence.bind(this);
    this.ListEvidences = this.ListEvidences.bind(this);
    this.SigningInfo = this.SigningInfo.bind(this);
    this.SigningInfos = this.SigningInfos.bind(this);
  }
  Params(request: QueryParamsRequest): Promise<QueryParamsResponse> {
    const data = QueryParamsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Params", data);
    return promise.then((data) =>
      QueryParamsResponse.decode(new BinaryReader(data)),
    );
  }

  ListPublicRandomness(
    request: QueryListPublicRandomnessRequest,
  ): Promise<QueryListPublicRandomnessResponse> {
    const data = QueryListPublicRandomnessRequest.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "ListPublicRandomness",
      data,
    );
    return promise.then((data) =>
      QueryListPublicRandomnessResponse.decode(new BinaryReader(data)),
    );
  }

  ListPubRandCommit(
    request: QueryListPubRandCommitRequest,
  ): Promise<QueryListPubRandCommitResponse> {
    const data = QueryListPubRandCommitRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListPubRandCommit", data);
    return promise.then((data) =>
      QueryListPubRandCommitResponse.decode(new BinaryReader(data)),
    );
  }

  Block(request: QueryBlockRequest): Promise<QueryBlockResponse> {
    const data = QueryBlockRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Block", data);
    return promise.then((data) =>
      QueryBlockResponse.decode(new BinaryReader(data)),
    );
  }

  ListBlocks(
    request: QueryListBlocksRequest,
  ): Promise<QueryListBlocksResponse> {
    const data = QueryListBlocksRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListBlocks", data);
    return promise.then((data) =>
      QueryListBlocksResponse.decode(new BinaryReader(data)),
    );
  }

  VotesAtHeight(
    request: QueryVotesAtHeightRequest,
  ): Promise<QueryVotesAtHeightResponse> {
    const data = QueryVotesAtHeightRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "VotesAtHeight", data);
    return promise.then((data) =>
      QueryVotesAtHeightResponse.decode(new BinaryReader(data)),
    );
  }

  Evidence(request: QueryEvidenceRequest): Promise<QueryEvidenceResponse> {
    const data = QueryEvidenceRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "Evidence", data);
    return promise.then((data) =>
      QueryEvidenceResponse.decode(new BinaryReader(data)),
    );
  }

  ListEvidences(
    request: QueryListEvidencesRequest,
  ): Promise<QueryListEvidencesResponse> {
    const data = QueryListEvidencesRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "ListEvidences", data);
    return promise.then((data) =>
      QueryListEvidencesResponse.decode(new BinaryReader(data)),
    );
  }

  SigningInfo(
    request: QuerySigningInfoRequest,
  ): Promise<QuerySigningInfoResponse> {
    const data = QuerySigningInfoRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SigningInfo", data);
    return promise.then((data) =>
      QuerySigningInfoResponse.decode(new BinaryReader(data)),
    );
  }

  SigningInfos(
    request: QuerySigningInfosRequest,
  ): Promise<QuerySigningInfosResponse> {
    const data = QuerySigningInfosRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "SigningInfos", data);
    return promise.then((data) =>
      QuerySigningInfosResponse.decode(new BinaryReader(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
