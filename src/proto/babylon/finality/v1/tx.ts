// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/finality/v1/tx.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Proof } from "../../../tendermint/crypto/proof";
import { Params } from "./params";

export const protobufPackage = "babylon.finality.v1";

/** MsgCommitPubRandList defines a message for committing a list of public randomness for EOTS */
export interface MsgCommitPubRandList {
  signer: string;
  /** fp_btc_pk is the BTC PK of the finality provider that commits the public randomness */
  fpBtcPk: Uint8Array;
  /** start_height is the start block height of the list of public randomness */
  startHeight: number;
  /** num_pub_rand is the number of public randomness committed */
  numPubRand: number;
  /**
   * commitment is the commitment of these public randomness
   * currently it's the root of the Merkle tree that includes these public randomness
   */
  commitment: Uint8Array;
  /**
   * sig is the signature on (start_height || num_pub_rand || commitment) signed by
   * SK corresponding to fp_btc_pk. This prevents others to commit public
   * randomness on behalf of fp_btc_pk
   * TODO: another option is to restrict signer to correspond to fp_btc_pk. This restricts
   * the tx submitter to be the holder of fp_btc_pk. Decide this later
   */
  sig: Uint8Array;
}

/** MsgCommitPubRandListResponse is the response to the MsgCommitPubRandList message */
export interface MsgCommitPubRandListResponse {}

/** MsgAddFinalitySig defines a message for adding a finality vote */
export interface MsgAddFinalitySig {
  signer: string;
  /** fp_btc_pk is the BTC PK of the finality provider that casts this vote */
  fpBtcPk: Uint8Array;
  /** block_height is the height of the voted block */
  blockHeight: number;
  /** pub_rand is the public randomness committed at this height */
  pubRand: Uint8Array;
  /** proof is the proof that the given public randomness is committed under the commitment */
  proof: Proof | undefined;
  /** block_app_hash is the AppHash of the voted block */
  blockAppHash: Uint8Array;
  /**
   * finality_sig is the finality signature to this block
   * where finality signature is an EOTS signature, i.e.,
   * the `s` in a Schnorr signature `(r, s)`
   * `r` is the public randomness that is already committed by the finality provider
   */
  finalitySig: Uint8Array;
}

/** MsgAddFinalitySigResponse is the response to the MsgAddFinalitySig message */
export interface MsgAddFinalitySigResponse {}

/** MsgUpdateParams defines a message for updating finality module parameters. */
export interface MsgUpdateParams {
  /**
   * authority is the address of the governance account.
   * just FYI: cosmos.AddressString marks that this field should use type alias
   * for AddressString instead of string, but the functionality is not yet implemented
   * in cosmos-proto
   */
  authority: string;
  /**
   * params defines the finality parameters to update.
   *
   * NOTE: All parameters must be supplied.
   */
  params: Params | undefined;
}

/** MsgUpdateParamsResponse is the response to the MsgUpdateParams message. */
export interface MsgUpdateParamsResponse {}

/** MsgUnjailFinalityProvider defines the Msg/UnjailFinalityProvider request type */
export interface MsgUnjailFinalityProvider {
  signer: string;
  /** fp_btc_pk is the BTC PK of the finality provider that commits the public randomness */
  fpBtcPk: Uint8Array;
}

/** MsgUnjailFinalityProviderResponse defines the Msg/UnjailFinalityProvider response type */
export interface MsgUnjailFinalityProviderResponse {}

function createBaseMsgCommitPubRandList(): MsgCommitPubRandList {
  return {
    signer: "",
    fpBtcPk: new Uint8Array(0),
    startHeight: 0,
    numPubRand: 0,
    commitment: new Uint8Array(0),
    sig: new Uint8Array(0),
  };
}

export const MsgCommitPubRandList: MessageFns<MsgCommitPubRandList> = {
  encode(
    message: MsgCommitPubRandList,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.fpBtcPk.length !== 0) {
      writer.uint32(18).bytes(message.fpBtcPk);
    }
    if (message.startHeight !== 0) {
      writer.uint32(24).uint64(message.startHeight);
    }
    if (message.numPubRand !== 0) {
      writer.uint32(32).uint64(message.numPubRand);
    }
    if (message.commitment.length !== 0) {
      writer.uint32(42).bytes(message.commitment);
    }
    if (message.sig.length !== 0) {
      writer.uint32(50).bytes(message.sig);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgCommitPubRandList {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgCommitPubRandList();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fpBtcPk = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.startHeight = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.numPubRand = longToNumber(reader.uint64());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.commitment = reader.bytes();
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.sig = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgCommitPubRandList {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      fpBtcPk: isSet(object.fpBtcPk)
        ? bytesFromBase64(object.fpBtcPk)
        : new Uint8Array(0),
      startHeight: isSet(object.startHeight)
        ? globalThis.Number(object.startHeight)
        : 0,
      numPubRand: isSet(object.numPubRand)
        ? globalThis.Number(object.numPubRand)
        : 0,
      commitment: isSet(object.commitment)
        ? bytesFromBase64(object.commitment)
        : new Uint8Array(0),
      sig: isSet(object.sig) ? bytesFromBase64(object.sig) : new Uint8Array(0),
    };
  },

  toJSON(message: MsgCommitPubRandList): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.fpBtcPk.length !== 0) {
      obj.fpBtcPk = base64FromBytes(message.fpBtcPk);
    }
    if (message.startHeight !== 0) {
      obj.startHeight = Math.round(message.startHeight);
    }
    if (message.numPubRand !== 0) {
      obj.numPubRand = Math.round(message.numPubRand);
    }
    if (message.commitment.length !== 0) {
      obj.commitment = base64FromBytes(message.commitment);
    }
    if (message.sig.length !== 0) {
      obj.sig = base64FromBytes(message.sig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgCommitPubRandList>, I>>(
    base?: I,
  ): MsgCommitPubRandList {
    return MsgCommitPubRandList.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgCommitPubRandList>, I>>(
    object: I,
  ): MsgCommitPubRandList {
    const message = createBaseMsgCommitPubRandList();
    message.signer = object.signer ?? "";
    message.fpBtcPk = object.fpBtcPk ?? new Uint8Array(0);
    message.startHeight = object.startHeight ?? 0;
    message.numPubRand = object.numPubRand ?? 0;
    message.commitment = object.commitment ?? new Uint8Array(0);
    message.sig = object.sig ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgCommitPubRandListResponse(): MsgCommitPubRandListResponse {
  return {};
}

export const MsgCommitPubRandListResponse: MessageFns<MsgCommitPubRandListResponse> =
  {
    encode(
      _: MsgCommitPubRandListResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MsgCommitPubRandListResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgCommitPubRandListResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): MsgCommitPubRandListResponse {
      return {};
    },

    toJSON(_: MsgCommitPubRandListResponse): unknown {
      const obj: any = {};
      return obj;
    },

    create<I extends Exact<DeepPartial<MsgCommitPubRandListResponse>, I>>(
      base?: I,
    ): MsgCommitPubRandListResponse {
      return MsgCommitPubRandListResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<MsgCommitPubRandListResponse>, I>>(
      _: I,
    ): MsgCommitPubRandListResponse {
      const message = createBaseMsgCommitPubRandListResponse();
      return message;
    },
  };

function createBaseMsgAddFinalitySig(): MsgAddFinalitySig {
  return {
    signer: "",
    fpBtcPk: new Uint8Array(0),
    blockHeight: 0,
    pubRand: new Uint8Array(0),
    proof: undefined,
    blockAppHash: new Uint8Array(0),
    finalitySig: new Uint8Array(0),
  };
}

export const MsgAddFinalitySig: MessageFns<MsgAddFinalitySig> = {
  encode(
    message: MsgAddFinalitySig,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.signer !== "") {
      writer.uint32(10).string(message.signer);
    }
    if (message.fpBtcPk.length !== 0) {
      writer.uint32(18).bytes(message.fpBtcPk);
    }
    if (message.blockHeight !== 0) {
      writer.uint32(24).uint64(message.blockHeight);
    }
    if (message.pubRand.length !== 0) {
      writer.uint32(34).bytes(message.pubRand);
    }
    if (message.proof !== undefined) {
      Proof.encode(message.proof, writer.uint32(42).fork()).join();
    }
    if (message.blockAppHash.length !== 0) {
      writer.uint32(50).bytes(message.blockAppHash);
    }
    if (message.finalitySig.length !== 0) {
      writer.uint32(58).bytes(message.finalitySig);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgAddFinalitySig {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgAddFinalitySig();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.signer = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.fpBtcPk = reader.bytes();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.blockHeight = longToNumber(reader.uint64());
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.pubRand = reader.bytes();
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.proof = Proof.decode(reader, reader.uint32());
          continue;
        case 6:
          if (tag !== 50) {
            break;
          }

          message.blockAppHash = reader.bytes();
          continue;
        case 7:
          if (tag !== 58) {
            break;
          }

          message.finalitySig = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgAddFinalitySig {
    return {
      signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
      fpBtcPk: isSet(object.fpBtcPk)
        ? bytesFromBase64(object.fpBtcPk)
        : new Uint8Array(0),
      blockHeight: isSet(object.blockHeight)
        ? globalThis.Number(object.blockHeight)
        : 0,
      pubRand: isSet(object.pubRand)
        ? bytesFromBase64(object.pubRand)
        : new Uint8Array(0),
      proof: isSet(object.proof) ? Proof.fromJSON(object.proof) : undefined,
      blockAppHash: isSet(object.blockAppHash)
        ? bytesFromBase64(object.blockAppHash)
        : new Uint8Array(0),
      finalitySig: isSet(object.finalitySig)
        ? bytesFromBase64(object.finalitySig)
        : new Uint8Array(0),
    };
  },

  toJSON(message: MsgAddFinalitySig): unknown {
    const obj: any = {};
    if (message.signer !== "") {
      obj.signer = message.signer;
    }
    if (message.fpBtcPk.length !== 0) {
      obj.fpBtcPk = base64FromBytes(message.fpBtcPk);
    }
    if (message.blockHeight !== 0) {
      obj.blockHeight = Math.round(message.blockHeight);
    }
    if (message.pubRand.length !== 0) {
      obj.pubRand = base64FromBytes(message.pubRand);
    }
    if (message.proof !== undefined) {
      obj.proof = Proof.toJSON(message.proof);
    }
    if (message.blockAppHash.length !== 0) {
      obj.blockAppHash = base64FromBytes(message.blockAppHash);
    }
    if (message.finalitySig.length !== 0) {
      obj.finalitySig = base64FromBytes(message.finalitySig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgAddFinalitySig>, I>>(
    base?: I,
  ): MsgAddFinalitySig {
    return MsgAddFinalitySig.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgAddFinalitySig>, I>>(
    object: I,
  ): MsgAddFinalitySig {
    const message = createBaseMsgAddFinalitySig();
    message.signer = object.signer ?? "";
    message.fpBtcPk = object.fpBtcPk ?? new Uint8Array(0);
    message.blockHeight = object.blockHeight ?? 0;
    message.pubRand = object.pubRand ?? new Uint8Array(0);
    message.proof =
      object.proof !== undefined && object.proof !== null
        ? Proof.fromPartial(object.proof)
        : undefined;
    message.blockAppHash = object.blockAppHash ?? new Uint8Array(0);
    message.finalitySig = object.finalitySig ?? new Uint8Array(0);
    return message;
  },
};

function createBaseMsgAddFinalitySigResponse(): MsgAddFinalitySigResponse {
  return {};
}

export const MsgAddFinalitySigResponse: MessageFns<MsgAddFinalitySigResponse> =
  {
    encode(
      _: MsgAddFinalitySigResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MsgAddFinalitySigResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgAddFinalitySigResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): MsgAddFinalitySigResponse {
      return {};
    },

    toJSON(_: MsgAddFinalitySigResponse): unknown {
      const obj: any = {};
      return obj;
    },

    create<I extends Exact<DeepPartial<MsgAddFinalitySigResponse>, I>>(
      base?: I,
    ): MsgAddFinalitySigResponse {
      return MsgAddFinalitySigResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<MsgAddFinalitySigResponse>, I>>(
      _: I,
    ): MsgAddFinalitySigResponse {
      const message = createBaseMsgAddFinalitySigResponse();
      return message;
    },
  };

function createBaseMsgUpdateParams(): MsgUpdateParams {
  return { authority: "", params: undefined };
}

export const MsgUpdateParams: MessageFns<MsgUpdateParams> = {
  encode(
    message: MsgUpdateParams,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.authority !== "") {
      writer.uint32(10).string(message.authority);
    }
    if (message.params !== undefined) {
      Params.encode(message.params, writer.uint32(18).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): MsgUpdateParams {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.authority = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.params = Params.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): MsgUpdateParams {
    return {
      authority: isSet(object.authority)
        ? globalThis.String(object.authority)
        : "",
      params: isSet(object.params) ? Params.fromJSON(object.params) : undefined,
    };
  },

  toJSON(message: MsgUpdateParams): unknown {
    const obj: any = {};
    if (message.authority !== "") {
      obj.authority = message.authority;
    }
    if (message.params !== undefined) {
      obj.params = Params.toJSON(message.params);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(
    base?: I,
  ): MsgUpdateParams {
    return MsgUpdateParams.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParams>, I>>(
    object: I,
  ): MsgUpdateParams {
    const message = createBaseMsgUpdateParams();
    message.authority = object.authority ?? "";
    message.params =
      object.params !== undefined && object.params !== null
        ? Params.fromPartial(object.params)
        : undefined;
    return message;
  },
};

function createBaseMsgUpdateParamsResponse(): MsgUpdateParamsResponse {
  return {};
}

export const MsgUpdateParamsResponse: MessageFns<MsgUpdateParamsResponse> = {
  encode(
    _: MsgUpdateParamsResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): MsgUpdateParamsResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseMsgUpdateParamsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): MsgUpdateParamsResponse {
    return {};
  },

  toJSON(_: MsgUpdateParamsResponse): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(
    base?: I,
  ): MsgUpdateParamsResponse {
    return MsgUpdateParamsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<MsgUpdateParamsResponse>, I>>(
    _: I,
  ): MsgUpdateParamsResponse {
    const message = createBaseMsgUpdateParamsResponse();
    return message;
  },
};

function createBaseMsgUnjailFinalityProvider(): MsgUnjailFinalityProvider {
  return { signer: "", fpBtcPk: new Uint8Array(0) };
}

export const MsgUnjailFinalityProvider: MessageFns<MsgUnjailFinalityProvider> =
  {
    encode(
      message: MsgUnjailFinalityProvider,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.signer !== "") {
        writer.uint32(10).string(message.signer);
      }
      if (message.fpBtcPk.length !== 0) {
        writer.uint32(18).bytes(message.fpBtcPk);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MsgUnjailFinalityProvider {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgUnjailFinalityProvider();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.signer = reader.string();
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.fpBtcPk = reader.bytes();
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): MsgUnjailFinalityProvider {
      return {
        signer: isSet(object.signer) ? globalThis.String(object.signer) : "",
        fpBtcPk: isSet(object.fpBtcPk)
          ? bytesFromBase64(object.fpBtcPk)
          : new Uint8Array(0),
      };
    },

    toJSON(message: MsgUnjailFinalityProvider): unknown {
      const obj: any = {};
      if (message.signer !== "") {
        obj.signer = message.signer;
      }
      if (message.fpBtcPk.length !== 0) {
        obj.fpBtcPk = base64FromBytes(message.fpBtcPk);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<MsgUnjailFinalityProvider>, I>>(
      base?: I,
    ): MsgUnjailFinalityProvider {
      return MsgUnjailFinalityProvider.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<MsgUnjailFinalityProvider>, I>>(
      object: I,
    ): MsgUnjailFinalityProvider {
      const message = createBaseMsgUnjailFinalityProvider();
      message.signer = object.signer ?? "";
      message.fpBtcPk = object.fpBtcPk ?? new Uint8Array(0);
      return message;
    },
  };

function createBaseMsgUnjailFinalityProviderResponse(): MsgUnjailFinalityProviderResponse {
  return {};
}

export const MsgUnjailFinalityProviderResponse: MessageFns<MsgUnjailFinalityProviderResponse> =
  {
    encode(
      _: MsgUnjailFinalityProviderResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): MsgUnjailFinalityProviderResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseMsgUnjailFinalityProviderResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(_: any): MsgUnjailFinalityProviderResponse {
      return {};
    },

    toJSON(_: MsgUnjailFinalityProviderResponse): unknown {
      const obj: any = {};
      return obj;
    },

    create<I extends Exact<DeepPartial<MsgUnjailFinalityProviderResponse>, I>>(
      base?: I,
    ): MsgUnjailFinalityProviderResponse {
      return MsgUnjailFinalityProviderResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<MsgUnjailFinalityProviderResponse>, I>,
    >(_: I): MsgUnjailFinalityProviderResponse {
      const message = createBaseMsgUnjailFinalityProviderResponse();
      return message;
    },
  };

/** Msg defines the Msg service. */
export interface Msg {
  /** CommitPubRandList commits a list of public randomness for EOTS */
  CommitPubRandList(
    request: MsgCommitPubRandList,
  ): Promise<MsgCommitPubRandListResponse>;
  /** AddFinalitySig adds a finality signature to a given block */
  AddFinalitySig(
    request: MsgAddFinalitySig,
  ): Promise<MsgAddFinalitySigResponse>;
  /**
   * TODO: msg for evidence of equivocation. this is not specified yet
   * UpdateParams updates the finality module parameters.
   */
  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse>;
  /**
   * UnjailFinalityProvider defines a method for unjailing a jailed
   * finality provider, thus it can receive voting power
   */
  UnjailFinalityProvider(
    request: MsgUnjailFinalityProvider,
  ): Promise<MsgUnjailFinalityProviderResponse>;
}

export const MsgServiceName = "babylon.finality.v1.Msg";
export class MsgClientImpl implements Msg {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || MsgServiceName;
    this.rpc = rpc;
    this.CommitPubRandList = this.CommitPubRandList.bind(this);
    this.AddFinalitySig = this.AddFinalitySig.bind(this);
    this.UpdateParams = this.UpdateParams.bind(this);
    this.UnjailFinalityProvider = this.UnjailFinalityProvider.bind(this);
  }
  CommitPubRandList(
    request: MsgCommitPubRandList,
  ): Promise<MsgCommitPubRandListResponse> {
    const data = MsgCommitPubRandList.encode(request).finish();
    const promise = this.rpc.request(this.service, "CommitPubRandList", data);
    return promise.then((data) =>
      MsgCommitPubRandListResponse.decode(new BinaryReader(data)),
    );
  }

  AddFinalitySig(
    request: MsgAddFinalitySig,
  ): Promise<MsgAddFinalitySigResponse> {
    const data = MsgAddFinalitySig.encode(request).finish();
    const promise = this.rpc.request(this.service, "AddFinalitySig", data);
    return promise.then((data) =>
      MsgAddFinalitySigResponse.decode(new BinaryReader(data)),
    );
  }

  UpdateParams(request: MsgUpdateParams): Promise<MsgUpdateParamsResponse> {
    const data = MsgUpdateParams.encode(request).finish();
    const promise = this.rpc.request(this.service, "UpdateParams", data);
    return promise.then((data) =>
      MsgUpdateParamsResponse.decode(new BinaryReader(data)),
    );
  }

  UnjailFinalityProvider(
    request: MsgUnjailFinalityProvider,
  ): Promise<MsgUnjailFinalityProviderResponse> {
    const data = MsgUnjailFinalityProvider.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "UnjailFinalityProvider",
      data,
    );
    return promise.then((data) =>
      MsgUnjailFinalityProviderResponse.decode(new BinaryReader(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
