// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/checkpointing/v1/query.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  PageRequest,
  PageResponse,
} from "../../../cosmos/base/query/v1beta1/pagination";
import { Timestamp } from "../../../google/protobuf/timestamp";
import {
  CheckpointStatus,
  checkpointStatusFromJSON,
  checkpointStatusToJSON,
} from "./checkpoint";

export const protobufPackage = "babylon.checkpointing.v1";

/**
 * QueryRawCheckpointListRequest is the request type for the
 * Query/RawCheckpoints RPC method.
 */
export interface QueryRawCheckpointListRequest {
  /** status defines the status of the raw checkpoints of the query */
  status: CheckpointStatus;
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * QueryRawCheckpointListResponse is the response type for the
 * Query/RawCheckpoints RPC method.
 */
export interface QueryRawCheckpointListResponse {
  /** the order is going from the newest to oldest based on the epoch number */
  rawCheckpoints: RawCheckpointWithMetaResponse[];
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryRawCheckpointRequest is the request type for the Query/RawCheckpoint
 * RPC method.
 */
export interface QueryRawCheckpointRequest {
  /** epoch_num defines the epoch for the queried checkpoint */
  epochNum: number;
}

/**
 * QueryRawCheckpointResponse is the response type for the Query/RawCheckpoint
 * RPC method.
 */
export interface QueryRawCheckpointResponse {
  rawCheckpoint: RawCheckpointWithMetaResponse | undefined;
}

/**
 * QueryRawCheckpointsRequest is the request type for the Query/RawCheckpoints
 * RPC method.
 */
export interface QueryRawCheckpointsRequest {
  /** pagination defines whether to have the pagination in the request */
  pagination: PageRequest | undefined;
}

/**
 * QueryRawCheckpointsResponse is the response type for the Query/RawCheckpoints
 * RPC method.
 */
export interface QueryRawCheckpointsResponse {
  /** the order is going from the newest to oldest based on the epoch number */
  rawCheckpoints: RawCheckpointWithMetaResponse[];
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryBlsPublicKeyListRequest is the request type for the Query/BlsPublicKeys
 * RPC method.
 */
export interface QueryBlsPublicKeyListRequest {
  /** epoch_num defines the epoch for the queried bls public keys */
  epochNum: number;
  /** pagination defines an optional pagination for the request. */
  pagination: PageRequest | undefined;
}

/**
 * BlsPublicKeyListResponse couples validator address, voting power, and its bls
 * public key
 */
export interface BlsPublicKeyListResponse {
  /** validator_address is the address of the validator */
  validatorAddress: string;
  /** bls_pub_key is the BLS public key of the validator */
  blsPubKeyHex: string;
  /** voting_power is the voting power of the validator at the given epoch */
  votingPower: number;
}

/**
 * QueryBlsPublicKeyListResponse is the response type for the
 * Query/BlsPublicKeys RPC method.
 */
export interface QueryBlsPublicKeyListResponse {
  validatorWithBlsKeys: BlsPublicKeyListResponse[];
  /** pagination defines the pagination in the response. */
  pagination: PageResponse | undefined;
}

/**
 * QueryEpochStatusRequest is the request type for the Query/EpochStatus
 * RPC method.
 */
export interface QueryEpochStatusRequest {
  epochNum: number;
}

/**
 * QueryEpochStatusResponse is the response type for the Query/EpochStatus
 * RPC method.
 */
export interface QueryEpochStatusResponse {
  status: CheckpointStatus;
}

/**
 * QueryRecentEpochStatusCountRequest is the request type for the
 * Query/EpochStatusCount RPC method.
 */
export interface QueryRecentEpochStatusCountRequest {
  /**
   * epoch_count is the number of the most recent epochs to include in the
   * aggregation
   */
  epochCount: number;
}

/**
 * QueryRecentEpochStatusCountResponse is the response type for the
 * Query/EpochStatusCount RPC method.
 */
export interface QueryRecentEpochStatusCountResponse {
  tipEpoch: number;
  epochCount: number;
  statusCount: { [key: string]: number };
}

export interface QueryRecentEpochStatusCountResponse_StatusCountEntry {
  key: string;
  value: number;
}

/**
 * QueryLastCheckpointWithStatusRequest is the request type for the
 * Query/LastCheckpointWithStatus RPC method.
 */
export interface QueryLastCheckpointWithStatusRequest {
  status: CheckpointStatus;
}

/**
 * QueryLastCheckpointWithStatusResponse is the response type for the
 * Query/LastCheckpointWithStatus RPC method.
 */
export interface QueryLastCheckpointWithStatusResponse {
  rawCheckpoint: RawCheckpointResponse | undefined;
}

/** RawCheckpointResponse wraps the BLS multi sig with metadata */
export interface RawCheckpointResponse {
  /** epoch_num defines the epoch number the raw checkpoint is for */
  epochNum: number;
  /**
   * block_hash_hex defines the 'BlockID.Hash', which is the hash of
   * the block that individual BLS sigs are signed on as hex string
   */
  blockHashHex: string;
  /** bitmap defines the bitmap that indicates the signers of the BLS multi sig */
  bitmap: Uint8Array;
  /**
   * bls_multi_sig defines the multi sig that is aggregated from individual BLS
   * sigs
   */
  blsMultiSig: Uint8Array;
}

/** CheckpointStateUpdateResponse defines a state transition on the checkpoint. */
export interface CheckpointStateUpdateResponse {
  /** state defines the event of a state transition towards this state */
  state: CheckpointStatus;
  /** status_desc represents the description of status enum. */
  statusDesc: string;
  /**
   * block_height is the height of the Babylon block that triggers the state
   * update
   */
  blockHeight: number;
  /**
   * block_time is the timestamp in the Babylon block that triggers the state
   * update
   */
  blockTime: Date | undefined;
}

/** RawCheckpointWithMetaResponse wraps the raw checkpoint with metadata. */
export interface RawCheckpointWithMetaResponse {
  ckpt: RawCheckpointResponse | undefined;
  /** status defines the status of the checkpoint */
  status: CheckpointStatus;
  /** status_desc represents the description of status enum. */
  statusDesc: string;
  /** bls_aggr_pk defines the aggregated BLS public key */
  blsAggrPk: Uint8Array;
  /** power_sum defines the accumulated voting power for the checkpoint */
  powerSum: number;
  /**
   * lifecycle defines the lifecycle of this checkpoint, i.e., each state
   * transition and the time (in both timestamp and block height) of this
   * transition.
   */
  lifecycle: CheckpointStateUpdateResponse[];
}

function createBaseQueryRawCheckpointListRequest(): QueryRawCheckpointListRequest {
  return { status: 0, pagination: undefined };
}

export const QueryRawCheckpointListRequest: MessageFns<QueryRawCheckpointListRequest> =
  {
    encode(
      message: QueryRawCheckpointListRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.status !== 0) {
        writer.uint32(8).int32(message.status);
      }
      if (message.pagination !== undefined) {
        PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryRawCheckpointListRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryRawCheckpointListRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.status = reader.int32() as any;
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageRequest.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryRawCheckpointListRequest {
      return {
        status: isSet(object.status)
          ? checkpointStatusFromJSON(object.status)
          : 0,
        pagination: isSet(object.pagination)
          ? PageRequest.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryRawCheckpointListRequest): unknown {
      const obj: any = {};
      if (message.status !== 0) {
        obj.status = checkpointStatusToJSON(message.status);
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageRequest.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryRawCheckpointListRequest>, I>>(
      base?: I,
    ): QueryRawCheckpointListRequest {
      return QueryRawCheckpointListRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryRawCheckpointListRequest>, I>>(
      object: I,
    ): QueryRawCheckpointListRequest {
      const message = createBaseQueryRawCheckpointListRequest();
      message.status = object.status ?? 0;
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageRequest.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseQueryRawCheckpointListResponse(): QueryRawCheckpointListResponse {
  return { rawCheckpoints: [], pagination: undefined };
}

export const QueryRawCheckpointListResponse: MessageFns<QueryRawCheckpointListResponse> =
  {
    encode(
      message: QueryRawCheckpointListResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.rawCheckpoints) {
        RawCheckpointWithMetaResponse.encode(
          v!,
          writer.uint32(10).fork(),
        ).join();
      }
      if (message.pagination !== undefined) {
        PageResponse.encode(
          message.pagination,
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryRawCheckpointListResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryRawCheckpointListResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.rawCheckpoints.push(
              RawCheckpointWithMetaResponse.decode(reader, reader.uint32()),
            );
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageResponse.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryRawCheckpointListResponse {
      return {
        rawCheckpoints: globalThis.Array.isArray(object?.rawCheckpoints)
          ? object.rawCheckpoints.map((e: any) =>
              RawCheckpointWithMetaResponse.fromJSON(e),
            )
          : [],
        pagination: isSet(object.pagination)
          ? PageResponse.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryRawCheckpointListResponse): unknown {
      const obj: any = {};
      if (message.rawCheckpoints?.length) {
        obj.rawCheckpoints = message.rawCheckpoints.map((e) =>
          RawCheckpointWithMetaResponse.toJSON(e),
        );
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageResponse.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryRawCheckpointListResponse>, I>>(
      base?: I,
    ): QueryRawCheckpointListResponse {
      return QueryRawCheckpointListResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryRawCheckpointListResponse>, I>,
    >(object: I): QueryRawCheckpointListResponse {
      const message = createBaseQueryRawCheckpointListResponse();
      message.rawCheckpoints =
        object.rawCheckpoints?.map((e) =>
          RawCheckpointWithMetaResponse.fromPartial(e),
        ) || [];
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageResponse.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseQueryRawCheckpointRequest(): QueryRawCheckpointRequest {
  return { epochNum: 0 };
}

export const QueryRawCheckpointRequest: MessageFns<QueryRawCheckpointRequest> =
  {
    encode(
      message: QueryRawCheckpointRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.epochNum !== 0) {
        writer.uint32(8).uint64(message.epochNum);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryRawCheckpointRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryRawCheckpointRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.epochNum = longToNumber(reader.uint64());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryRawCheckpointRequest {
      return {
        epochNum: isSet(object.epochNum)
          ? globalThis.Number(object.epochNum)
          : 0,
      };
    },

    toJSON(message: QueryRawCheckpointRequest): unknown {
      const obj: any = {};
      if (message.epochNum !== 0) {
        obj.epochNum = Math.round(message.epochNum);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryRawCheckpointRequest>, I>>(
      base?: I,
    ): QueryRawCheckpointRequest {
      return QueryRawCheckpointRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryRawCheckpointRequest>, I>>(
      object: I,
    ): QueryRawCheckpointRequest {
      const message = createBaseQueryRawCheckpointRequest();
      message.epochNum = object.epochNum ?? 0;
      return message;
    },
  };

function createBaseQueryRawCheckpointResponse(): QueryRawCheckpointResponse {
  return { rawCheckpoint: undefined };
}

export const QueryRawCheckpointResponse: MessageFns<QueryRawCheckpointResponse> =
  {
    encode(
      message: QueryRawCheckpointResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.rawCheckpoint !== undefined) {
        RawCheckpointWithMetaResponse.encode(
          message.rawCheckpoint,
          writer.uint32(10).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryRawCheckpointResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryRawCheckpointResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.rawCheckpoint = RawCheckpointWithMetaResponse.decode(
              reader,
              reader.uint32(),
            );
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryRawCheckpointResponse {
      return {
        rawCheckpoint: isSet(object.rawCheckpoint)
          ? RawCheckpointWithMetaResponse.fromJSON(object.rawCheckpoint)
          : undefined,
      };
    },

    toJSON(message: QueryRawCheckpointResponse): unknown {
      const obj: any = {};
      if (message.rawCheckpoint !== undefined) {
        obj.rawCheckpoint = RawCheckpointWithMetaResponse.toJSON(
          message.rawCheckpoint,
        );
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryRawCheckpointResponse>, I>>(
      base?: I,
    ): QueryRawCheckpointResponse {
      return QueryRawCheckpointResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryRawCheckpointResponse>, I>>(
      object: I,
    ): QueryRawCheckpointResponse {
      const message = createBaseQueryRawCheckpointResponse();
      message.rawCheckpoint =
        object.rawCheckpoint !== undefined && object.rawCheckpoint !== null
          ? RawCheckpointWithMetaResponse.fromPartial(object.rawCheckpoint)
          : undefined;
      return message;
    },
  };

function createBaseQueryRawCheckpointsRequest(): QueryRawCheckpointsRequest {
  return { pagination: undefined };
}

export const QueryRawCheckpointsRequest: MessageFns<QueryRawCheckpointsRequest> =
  {
    encode(
      message: QueryRawCheckpointsRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.pagination !== undefined) {
        PageRequest.encode(message.pagination, writer.uint32(10).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryRawCheckpointsRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryRawCheckpointsRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.pagination = PageRequest.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryRawCheckpointsRequest {
      return {
        pagination: isSet(object.pagination)
          ? PageRequest.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryRawCheckpointsRequest): unknown {
      const obj: any = {};
      if (message.pagination !== undefined) {
        obj.pagination = PageRequest.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryRawCheckpointsRequest>, I>>(
      base?: I,
    ): QueryRawCheckpointsRequest {
      return QueryRawCheckpointsRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryRawCheckpointsRequest>, I>>(
      object: I,
    ): QueryRawCheckpointsRequest {
      const message = createBaseQueryRawCheckpointsRequest();
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageRequest.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseQueryRawCheckpointsResponse(): QueryRawCheckpointsResponse {
  return { rawCheckpoints: [], pagination: undefined };
}

export const QueryRawCheckpointsResponse: MessageFns<QueryRawCheckpointsResponse> =
  {
    encode(
      message: QueryRawCheckpointsResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.rawCheckpoints) {
        RawCheckpointWithMetaResponse.encode(
          v!,
          writer.uint32(10).fork(),
        ).join();
      }
      if (message.pagination !== undefined) {
        PageResponse.encode(
          message.pagination,
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryRawCheckpointsResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryRawCheckpointsResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.rawCheckpoints.push(
              RawCheckpointWithMetaResponse.decode(reader, reader.uint32()),
            );
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageResponse.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryRawCheckpointsResponse {
      return {
        rawCheckpoints: globalThis.Array.isArray(object?.rawCheckpoints)
          ? object.rawCheckpoints.map((e: any) =>
              RawCheckpointWithMetaResponse.fromJSON(e),
            )
          : [],
        pagination: isSet(object.pagination)
          ? PageResponse.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryRawCheckpointsResponse): unknown {
      const obj: any = {};
      if (message.rawCheckpoints?.length) {
        obj.rawCheckpoints = message.rawCheckpoints.map((e) =>
          RawCheckpointWithMetaResponse.toJSON(e),
        );
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageResponse.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryRawCheckpointsResponse>, I>>(
      base?: I,
    ): QueryRawCheckpointsResponse {
      return QueryRawCheckpointsResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryRawCheckpointsResponse>, I>>(
      object: I,
    ): QueryRawCheckpointsResponse {
      const message = createBaseQueryRawCheckpointsResponse();
      message.rawCheckpoints =
        object.rawCheckpoints?.map((e) =>
          RawCheckpointWithMetaResponse.fromPartial(e),
        ) || [];
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageResponse.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseQueryBlsPublicKeyListRequest(): QueryBlsPublicKeyListRequest {
  return { epochNum: 0, pagination: undefined };
}

export const QueryBlsPublicKeyListRequest: MessageFns<QueryBlsPublicKeyListRequest> =
  {
    encode(
      message: QueryBlsPublicKeyListRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.epochNum !== 0) {
        writer.uint32(8).uint64(message.epochNum);
      }
      if (message.pagination !== undefined) {
        PageRequest.encode(message.pagination, writer.uint32(18).fork()).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryBlsPublicKeyListRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryBlsPublicKeyListRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.epochNum = longToNumber(reader.uint64());
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageRequest.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryBlsPublicKeyListRequest {
      return {
        epochNum: isSet(object.epochNum)
          ? globalThis.Number(object.epochNum)
          : 0,
        pagination: isSet(object.pagination)
          ? PageRequest.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryBlsPublicKeyListRequest): unknown {
      const obj: any = {};
      if (message.epochNum !== 0) {
        obj.epochNum = Math.round(message.epochNum);
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageRequest.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryBlsPublicKeyListRequest>, I>>(
      base?: I,
    ): QueryBlsPublicKeyListRequest {
      return QueryBlsPublicKeyListRequest.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryBlsPublicKeyListRequest>, I>>(
      object: I,
    ): QueryBlsPublicKeyListRequest {
      const message = createBaseQueryBlsPublicKeyListRequest();
      message.epochNum = object.epochNum ?? 0;
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageRequest.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseBlsPublicKeyListResponse(): BlsPublicKeyListResponse {
  return { validatorAddress: "", blsPubKeyHex: "", votingPower: 0 };
}

export const BlsPublicKeyListResponse: MessageFns<BlsPublicKeyListResponse> = {
  encode(
    message: BlsPublicKeyListResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.validatorAddress !== "") {
      writer.uint32(10).string(message.validatorAddress);
    }
    if (message.blsPubKeyHex !== "") {
      writer.uint32(18).string(message.blsPubKeyHex);
    }
    if (message.votingPower !== 0) {
      writer.uint32(24).uint64(message.votingPower);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): BlsPublicKeyListResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBlsPublicKeyListResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.validatorAddress = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blsPubKeyHex = reader.string();
          continue;
        case 3:
          if (tag !== 24) {
            break;
          }

          message.votingPower = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): BlsPublicKeyListResponse {
    return {
      validatorAddress: isSet(object.validatorAddress)
        ? globalThis.String(object.validatorAddress)
        : "",
      blsPubKeyHex: isSet(object.blsPubKeyHex)
        ? globalThis.String(object.blsPubKeyHex)
        : "",
      votingPower: isSet(object.votingPower)
        ? globalThis.Number(object.votingPower)
        : 0,
    };
  },

  toJSON(message: BlsPublicKeyListResponse): unknown {
    const obj: any = {};
    if (message.validatorAddress !== "") {
      obj.validatorAddress = message.validatorAddress;
    }
    if (message.blsPubKeyHex !== "") {
      obj.blsPubKeyHex = message.blsPubKeyHex;
    }
    if (message.votingPower !== 0) {
      obj.votingPower = Math.round(message.votingPower);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<BlsPublicKeyListResponse>, I>>(
    base?: I,
  ): BlsPublicKeyListResponse {
    return BlsPublicKeyListResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<BlsPublicKeyListResponse>, I>>(
    object: I,
  ): BlsPublicKeyListResponse {
    const message = createBaseBlsPublicKeyListResponse();
    message.validatorAddress = object.validatorAddress ?? "";
    message.blsPubKeyHex = object.blsPubKeyHex ?? "";
    message.votingPower = object.votingPower ?? 0;
    return message;
  },
};

function createBaseQueryBlsPublicKeyListResponse(): QueryBlsPublicKeyListResponse {
  return { validatorWithBlsKeys: [], pagination: undefined };
}

export const QueryBlsPublicKeyListResponse: MessageFns<QueryBlsPublicKeyListResponse> =
  {
    encode(
      message: QueryBlsPublicKeyListResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      for (const v of message.validatorWithBlsKeys) {
        BlsPublicKeyListResponse.encode(v!, writer.uint32(10).fork()).join();
      }
      if (message.pagination !== undefined) {
        PageResponse.encode(
          message.pagination,
          writer.uint32(18).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryBlsPublicKeyListResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryBlsPublicKeyListResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.validatorWithBlsKeys.push(
              BlsPublicKeyListResponse.decode(reader, reader.uint32()),
            );
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.pagination = PageResponse.decode(reader, reader.uint32());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryBlsPublicKeyListResponse {
      return {
        validatorWithBlsKeys: globalThis.Array.isArray(
          object?.validatorWithBlsKeys,
        )
          ? object.validatorWithBlsKeys.map((e: any) =>
              BlsPublicKeyListResponse.fromJSON(e),
            )
          : [],
        pagination: isSet(object.pagination)
          ? PageResponse.fromJSON(object.pagination)
          : undefined,
      };
    },

    toJSON(message: QueryBlsPublicKeyListResponse): unknown {
      const obj: any = {};
      if (message.validatorWithBlsKeys?.length) {
        obj.validatorWithBlsKeys = message.validatorWithBlsKeys.map((e) =>
          BlsPublicKeyListResponse.toJSON(e),
        );
      }
      if (message.pagination !== undefined) {
        obj.pagination = PageResponse.toJSON(message.pagination);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryBlsPublicKeyListResponse>, I>>(
      base?: I,
    ): QueryBlsPublicKeyListResponse {
      return QueryBlsPublicKeyListResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<QueryBlsPublicKeyListResponse>, I>>(
      object: I,
    ): QueryBlsPublicKeyListResponse {
      const message = createBaseQueryBlsPublicKeyListResponse();
      message.validatorWithBlsKeys =
        object.validatorWithBlsKeys?.map((e) =>
          BlsPublicKeyListResponse.fromPartial(e),
        ) || [];
      message.pagination =
        object.pagination !== undefined && object.pagination !== null
          ? PageResponse.fromPartial(object.pagination)
          : undefined;
      return message;
    },
  };

function createBaseQueryEpochStatusRequest(): QueryEpochStatusRequest {
  return { epochNum: 0 };
}

export const QueryEpochStatusRequest: MessageFns<QueryEpochStatusRequest> = {
  encode(
    message: QueryEpochStatusRequest,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.epochNum !== 0) {
      writer.uint32(8).uint64(message.epochNum);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryEpochStatusRequest {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEpochStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.epochNum = longToNumber(reader.uint64());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEpochStatusRequest {
    return {
      epochNum: isSet(object.epochNum) ? globalThis.Number(object.epochNum) : 0,
    };
  },

  toJSON(message: QueryEpochStatusRequest): unknown {
    const obj: any = {};
    if (message.epochNum !== 0) {
      obj.epochNum = Math.round(message.epochNum);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEpochStatusRequest>, I>>(
    base?: I,
  ): QueryEpochStatusRequest {
    return QueryEpochStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEpochStatusRequest>, I>>(
    object: I,
  ): QueryEpochStatusRequest {
    const message = createBaseQueryEpochStatusRequest();
    message.epochNum = object.epochNum ?? 0;
    return message;
  },
};

function createBaseQueryEpochStatusResponse(): QueryEpochStatusResponse {
  return { status: 0 };
}

export const QueryEpochStatusResponse: MessageFns<QueryEpochStatusResponse> = {
  encode(
    message: QueryEpochStatusResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.status !== 0) {
      writer.uint32(8).int32(message.status);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): QueryEpochStatusResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseQueryEpochStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): QueryEpochStatusResponse {
    return {
      status: isSet(object.status)
        ? checkpointStatusFromJSON(object.status)
        : 0,
    };
  },

  toJSON(message: QueryEpochStatusResponse): unknown {
    const obj: any = {};
    if (message.status !== 0) {
      obj.status = checkpointStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<QueryEpochStatusResponse>, I>>(
    base?: I,
  ): QueryEpochStatusResponse {
    return QueryEpochStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<QueryEpochStatusResponse>, I>>(
    object: I,
  ): QueryEpochStatusResponse {
    const message = createBaseQueryEpochStatusResponse();
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseQueryRecentEpochStatusCountRequest(): QueryRecentEpochStatusCountRequest {
  return { epochCount: 0 };
}

export const QueryRecentEpochStatusCountRequest: MessageFns<QueryRecentEpochStatusCountRequest> =
  {
    encode(
      message: QueryRecentEpochStatusCountRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.epochCount !== 0) {
        writer.uint32(8).uint64(message.epochCount);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryRecentEpochStatusCountRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryRecentEpochStatusCountRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.epochCount = longToNumber(reader.uint64());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryRecentEpochStatusCountRequest {
      return {
        epochCount: isSet(object.epochCount)
          ? globalThis.Number(object.epochCount)
          : 0,
      };
    },

    toJSON(message: QueryRecentEpochStatusCountRequest): unknown {
      const obj: any = {};
      if (message.epochCount !== 0) {
        obj.epochCount = Math.round(message.epochCount);
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<QueryRecentEpochStatusCountRequest>, I>>(
      base?: I,
    ): QueryRecentEpochStatusCountRequest {
      return QueryRecentEpochStatusCountRequest.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryRecentEpochStatusCountRequest>, I>,
    >(object: I): QueryRecentEpochStatusCountRequest {
      const message = createBaseQueryRecentEpochStatusCountRequest();
      message.epochCount = object.epochCount ?? 0;
      return message;
    },
  };

function createBaseQueryRecentEpochStatusCountResponse(): QueryRecentEpochStatusCountResponse {
  return { tipEpoch: 0, epochCount: 0, statusCount: {} };
}

export const QueryRecentEpochStatusCountResponse: MessageFns<QueryRecentEpochStatusCountResponse> =
  {
    encode(
      message: QueryRecentEpochStatusCountResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.tipEpoch !== 0) {
        writer.uint32(8).uint64(message.tipEpoch);
      }
      if (message.epochCount !== 0) {
        writer.uint32(16).uint64(message.epochCount);
      }
      Object.entries(message.statusCount).forEach(([key, value]) => {
        QueryRecentEpochStatusCountResponse_StatusCountEntry.encode(
          { key: key as any, value },
          writer.uint32(26).fork(),
        ).join();
      });
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryRecentEpochStatusCountResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryRecentEpochStatusCountResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.tipEpoch = longToNumber(reader.uint64());
            continue;
          case 2:
            if (tag !== 16) {
              break;
            }

            message.epochCount = longToNumber(reader.uint64());
            continue;
          case 3:
            if (tag !== 26) {
              break;
            }

            const entry3 =
              QueryRecentEpochStatusCountResponse_StatusCountEntry.decode(
                reader,
                reader.uint32(),
              );
            if (entry3.value !== undefined) {
              message.statusCount[entry3.key] = entry3.value;
            }
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryRecentEpochStatusCountResponse {
      return {
        tipEpoch: isSet(object.tipEpoch)
          ? globalThis.Number(object.tipEpoch)
          : 0,
        epochCount: isSet(object.epochCount)
          ? globalThis.Number(object.epochCount)
          : 0,
        statusCount: isObject(object.statusCount)
          ? Object.entries(object.statusCount).reduce<{
              [key: string]: number;
            }>((acc, [key, value]) => {
              acc[key] = Number(value);
              return acc;
            }, {})
          : {},
      };
    },

    toJSON(message: QueryRecentEpochStatusCountResponse): unknown {
      const obj: any = {};
      if (message.tipEpoch !== 0) {
        obj.tipEpoch = Math.round(message.tipEpoch);
      }
      if (message.epochCount !== 0) {
        obj.epochCount = Math.round(message.epochCount);
      }
      if (message.statusCount) {
        const entries = Object.entries(message.statusCount);
        if (entries.length > 0) {
          obj.statusCount = {};
          entries.forEach(([k, v]) => {
            obj.statusCount[k] = Math.round(v);
          });
        }
      }
      return obj;
    },

    create<
      I extends Exact<DeepPartial<QueryRecentEpochStatusCountResponse>, I>,
    >(base?: I): QueryRecentEpochStatusCountResponse {
      return QueryRecentEpochStatusCountResponse.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryRecentEpochStatusCountResponse>, I>,
    >(object: I): QueryRecentEpochStatusCountResponse {
      const message = createBaseQueryRecentEpochStatusCountResponse();
      message.tipEpoch = object.tipEpoch ?? 0;
      message.epochCount = object.epochCount ?? 0;
      message.statusCount = Object.entries(object.statusCount ?? {}).reduce<{
        [key: string]: number;
      }>((acc, [key, value]) => {
        if (value !== undefined) {
          acc[key] = globalThis.Number(value);
        }
        return acc;
      }, {});
      return message;
    },
  };

function createBaseQueryRecentEpochStatusCountResponse_StatusCountEntry(): QueryRecentEpochStatusCountResponse_StatusCountEntry {
  return { key: "", value: 0 };
}

export const QueryRecentEpochStatusCountResponse_StatusCountEntry: MessageFns<QueryRecentEpochStatusCountResponse_StatusCountEntry> =
  {
    encode(
      message: QueryRecentEpochStatusCountResponse_StatusCountEntry,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.key !== "") {
        writer.uint32(10).string(message.key);
      }
      if (message.value !== 0) {
        writer.uint32(16).uint64(message.value);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryRecentEpochStatusCountResponse_StatusCountEntry {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message =
        createBaseQueryRecentEpochStatusCountResponse_StatusCountEntry();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.key = reader.string();
            continue;
          case 2:
            if (tag !== 16) {
              break;
            }

            message.value = longToNumber(reader.uint64());
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(
      object: any,
    ): QueryRecentEpochStatusCountResponse_StatusCountEntry {
      return {
        key: isSet(object.key) ? globalThis.String(object.key) : "",
        value: isSet(object.value) ? globalThis.Number(object.value) : 0,
      };
    },

    toJSON(
      message: QueryRecentEpochStatusCountResponse_StatusCountEntry,
    ): unknown {
      const obj: any = {};
      if (message.key !== "") {
        obj.key = message.key;
      }
      if (message.value !== 0) {
        obj.value = Math.round(message.value);
      }
      return obj;
    },

    create<
      I extends Exact<
        DeepPartial<QueryRecentEpochStatusCountResponse_StatusCountEntry>,
        I
      >,
    >(base?: I): QueryRecentEpochStatusCountResponse_StatusCountEntry {
      return QueryRecentEpochStatusCountResponse_StatusCountEntry.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<
        DeepPartial<QueryRecentEpochStatusCountResponse_StatusCountEntry>,
        I
      >,
    >(object: I): QueryRecentEpochStatusCountResponse_StatusCountEntry {
      const message =
        createBaseQueryRecentEpochStatusCountResponse_StatusCountEntry();
      message.key = object.key ?? "";
      message.value = object.value ?? 0;
      return message;
    },
  };

function createBaseQueryLastCheckpointWithStatusRequest(): QueryLastCheckpointWithStatusRequest {
  return { status: 0 };
}

export const QueryLastCheckpointWithStatusRequest: MessageFns<QueryLastCheckpointWithStatusRequest> =
  {
    encode(
      message: QueryLastCheckpointWithStatusRequest,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.status !== 0) {
        writer.uint32(8).int32(message.status);
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryLastCheckpointWithStatusRequest {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryLastCheckpointWithStatusRequest();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.status = reader.int32() as any;
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryLastCheckpointWithStatusRequest {
      return {
        status: isSet(object.status)
          ? checkpointStatusFromJSON(object.status)
          : 0,
      };
    },

    toJSON(message: QueryLastCheckpointWithStatusRequest): unknown {
      const obj: any = {};
      if (message.status !== 0) {
        obj.status = checkpointStatusToJSON(message.status);
      }
      return obj;
    },

    create<
      I extends Exact<DeepPartial<QueryLastCheckpointWithStatusRequest>, I>,
    >(base?: I): QueryLastCheckpointWithStatusRequest {
      return QueryLastCheckpointWithStatusRequest.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryLastCheckpointWithStatusRequest>, I>,
    >(object: I): QueryLastCheckpointWithStatusRequest {
      const message = createBaseQueryLastCheckpointWithStatusRequest();
      message.status = object.status ?? 0;
      return message;
    },
  };

function createBaseQueryLastCheckpointWithStatusResponse(): QueryLastCheckpointWithStatusResponse {
  return { rawCheckpoint: undefined };
}

export const QueryLastCheckpointWithStatusResponse: MessageFns<QueryLastCheckpointWithStatusResponse> =
  {
    encode(
      message: QueryLastCheckpointWithStatusResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.rawCheckpoint !== undefined) {
        RawCheckpointResponse.encode(
          message.rawCheckpoint,
          writer.uint32(10).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): QueryLastCheckpointWithStatusResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseQueryLastCheckpointWithStatusResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.rawCheckpoint = RawCheckpointResponse.decode(
              reader,
              reader.uint32(),
            );
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): QueryLastCheckpointWithStatusResponse {
      return {
        rawCheckpoint: isSet(object.rawCheckpoint)
          ? RawCheckpointResponse.fromJSON(object.rawCheckpoint)
          : undefined,
      };
    },

    toJSON(message: QueryLastCheckpointWithStatusResponse): unknown {
      const obj: any = {};
      if (message.rawCheckpoint !== undefined) {
        obj.rawCheckpoint = RawCheckpointResponse.toJSON(message.rawCheckpoint);
      }
      return obj;
    },

    create<
      I extends Exact<DeepPartial<QueryLastCheckpointWithStatusResponse>, I>,
    >(base?: I): QueryLastCheckpointWithStatusResponse {
      return QueryLastCheckpointWithStatusResponse.fromPartial(
        base ?? ({} as any),
      );
    },
    fromPartial<
      I extends Exact<DeepPartial<QueryLastCheckpointWithStatusResponse>, I>,
    >(object: I): QueryLastCheckpointWithStatusResponse {
      const message = createBaseQueryLastCheckpointWithStatusResponse();
      message.rawCheckpoint =
        object.rawCheckpoint !== undefined && object.rawCheckpoint !== null
          ? RawCheckpointResponse.fromPartial(object.rawCheckpoint)
          : undefined;
      return message;
    },
  };

function createBaseRawCheckpointResponse(): RawCheckpointResponse {
  return {
    epochNum: 0,
    blockHashHex: "",
    bitmap: new Uint8Array(0),
    blsMultiSig: new Uint8Array(0),
  };
}

export const RawCheckpointResponse: MessageFns<RawCheckpointResponse> = {
  encode(
    message: RawCheckpointResponse,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.epochNum !== 0) {
      writer.uint32(8).uint64(message.epochNum);
    }
    if (message.blockHashHex !== "") {
      writer.uint32(18).string(message.blockHashHex);
    }
    if (message.bitmap.length !== 0) {
      writer.uint32(26).bytes(message.bitmap);
    }
    if (message.blsMultiSig.length !== 0) {
      writer.uint32(34).bytes(message.blsMultiSig);
    }
    return writer;
  },

  decode(
    input: BinaryReader | Uint8Array,
    length?: number,
  ): RawCheckpointResponse {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseRawCheckpointResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.epochNum = longToNumber(reader.uint64());
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.blockHashHex = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.bitmap = reader.bytes();
          continue;
        case 4:
          if (tag !== 34) {
            break;
          }

          message.blsMultiSig = reader.bytes();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): RawCheckpointResponse {
    return {
      epochNum: isSet(object.epochNum) ? globalThis.Number(object.epochNum) : 0,
      blockHashHex: isSet(object.blockHashHex)
        ? globalThis.String(object.blockHashHex)
        : "",
      bitmap: isSet(object.bitmap)
        ? bytesFromBase64(object.bitmap)
        : new Uint8Array(0),
      blsMultiSig: isSet(object.blsMultiSig)
        ? bytesFromBase64(object.blsMultiSig)
        : new Uint8Array(0),
    };
  },

  toJSON(message: RawCheckpointResponse): unknown {
    const obj: any = {};
    if (message.epochNum !== 0) {
      obj.epochNum = Math.round(message.epochNum);
    }
    if (message.blockHashHex !== "") {
      obj.blockHashHex = message.blockHashHex;
    }
    if (message.bitmap.length !== 0) {
      obj.bitmap = base64FromBytes(message.bitmap);
    }
    if (message.blsMultiSig.length !== 0) {
      obj.blsMultiSig = base64FromBytes(message.blsMultiSig);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<RawCheckpointResponse>, I>>(
    base?: I,
  ): RawCheckpointResponse {
    return RawCheckpointResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<RawCheckpointResponse>, I>>(
    object: I,
  ): RawCheckpointResponse {
    const message = createBaseRawCheckpointResponse();
    message.epochNum = object.epochNum ?? 0;
    message.blockHashHex = object.blockHashHex ?? "";
    message.bitmap = object.bitmap ?? new Uint8Array(0);
    message.blsMultiSig = object.blsMultiSig ?? new Uint8Array(0);
    return message;
  },
};

function createBaseCheckpointStateUpdateResponse(): CheckpointStateUpdateResponse {
  return { state: 0, statusDesc: "", blockHeight: 0, blockTime: undefined };
}

export const CheckpointStateUpdateResponse: MessageFns<CheckpointStateUpdateResponse> =
  {
    encode(
      message: CheckpointStateUpdateResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.state !== 0) {
        writer.uint32(8).int32(message.state);
      }
      if (message.statusDesc !== "") {
        writer.uint32(18).string(message.statusDesc);
      }
      if (message.blockHeight !== 0) {
        writer.uint32(24).uint64(message.blockHeight);
      }
      if (message.blockTime !== undefined) {
        Timestamp.encode(
          toTimestamp(message.blockTime),
          writer.uint32(34).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): CheckpointStateUpdateResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseCheckpointStateUpdateResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 8) {
              break;
            }

            message.state = reader.int32() as any;
            continue;
          case 2:
            if (tag !== 18) {
              break;
            }

            message.statusDesc = reader.string();
            continue;
          case 3:
            if (tag !== 24) {
              break;
            }

            message.blockHeight = longToNumber(reader.uint64());
            continue;
          case 4:
            if (tag !== 34) {
              break;
            }

            message.blockTime = fromTimestamp(
              Timestamp.decode(reader, reader.uint32()),
            );
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): CheckpointStateUpdateResponse {
      return {
        state: isSet(object.state) ? checkpointStatusFromJSON(object.state) : 0,
        statusDesc: isSet(object.statusDesc)
          ? globalThis.String(object.statusDesc)
          : "",
        blockHeight: isSet(object.blockHeight)
          ? globalThis.Number(object.blockHeight)
          : 0,
        blockTime: isSet(object.blockTime)
          ? fromJsonTimestamp(object.blockTime)
          : undefined,
      };
    },

    toJSON(message: CheckpointStateUpdateResponse): unknown {
      const obj: any = {};
      if (message.state !== 0) {
        obj.state = checkpointStatusToJSON(message.state);
      }
      if (message.statusDesc !== "") {
        obj.statusDesc = message.statusDesc;
      }
      if (message.blockHeight !== 0) {
        obj.blockHeight = Math.round(message.blockHeight);
      }
      if (message.blockTime !== undefined) {
        obj.blockTime = message.blockTime.toISOString();
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<CheckpointStateUpdateResponse>, I>>(
      base?: I,
    ): CheckpointStateUpdateResponse {
      return CheckpointStateUpdateResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<CheckpointStateUpdateResponse>, I>>(
      object: I,
    ): CheckpointStateUpdateResponse {
      const message = createBaseCheckpointStateUpdateResponse();
      message.state = object.state ?? 0;
      message.statusDesc = object.statusDesc ?? "";
      message.blockHeight = object.blockHeight ?? 0;
      message.blockTime = object.blockTime ?? undefined;
      return message;
    },
  };

function createBaseRawCheckpointWithMetaResponse(): RawCheckpointWithMetaResponse {
  return {
    ckpt: undefined,
    status: 0,
    statusDesc: "",
    blsAggrPk: new Uint8Array(0),
    powerSum: 0,
    lifecycle: [],
  };
}

export const RawCheckpointWithMetaResponse: MessageFns<RawCheckpointWithMetaResponse> =
  {
    encode(
      message: RawCheckpointWithMetaResponse,
      writer: BinaryWriter = new BinaryWriter(),
    ): BinaryWriter {
      if (message.ckpt !== undefined) {
        RawCheckpointResponse.encode(
          message.ckpt,
          writer.uint32(10).fork(),
        ).join();
      }
      if (message.status !== 0) {
        writer.uint32(16).int32(message.status);
      }
      if (message.statusDesc !== "") {
        writer.uint32(26).string(message.statusDesc);
      }
      if (message.blsAggrPk.length !== 0) {
        writer.uint32(34).bytes(message.blsAggrPk);
      }
      if (message.powerSum !== 0) {
        writer.uint32(40).uint64(message.powerSum);
      }
      for (const v of message.lifecycle) {
        CheckpointStateUpdateResponse.encode(
          v!,
          writer.uint32(50).fork(),
        ).join();
      }
      return writer;
    },

    decode(
      input: BinaryReader | Uint8Array,
      length?: number,
    ): RawCheckpointWithMetaResponse {
      const reader =
        input instanceof BinaryReader ? input : new BinaryReader(input);
      let end = length === undefined ? reader.len : reader.pos + length;
      const message = createBaseRawCheckpointWithMetaResponse();
      while (reader.pos < end) {
        const tag = reader.uint32();
        switch (tag >>> 3) {
          case 1:
            if (tag !== 10) {
              break;
            }

            message.ckpt = RawCheckpointResponse.decode(
              reader,
              reader.uint32(),
            );
            continue;
          case 2:
            if (tag !== 16) {
              break;
            }

            message.status = reader.int32() as any;
            continue;
          case 3:
            if (tag !== 26) {
              break;
            }

            message.statusDesc = reader.string();
            continue;
          case 4:
            if (tag !== 34) {
              break;
            }

            message.blsAggrPk = reader.bytes();
            continue;
          case 5:
            if (tag !== 40) {
              break;
            }

            message.powerSum = longToNumber(reader.uint64());
            continue;
          case 6:
            if (tag !== 50) {
              break;
            }

            message.lifecycle.push(
              CheckpointStateUpdateResponse.decode(reader, reader.uint32()),
            );
            continue;
        }
        if ((tag & 7) === 4 || tag === 0) {
          break;
        }
        reader.skip(tag & 7);
      }
      return message;
    },

    fromJSON(object: any): RawCheckpointWithMetaResponse {
      return {
        ckpt: isSet(object.ckpt)
          ? RawCheckpointResponse.fromJSON(object.ckpt)
          : undefined,
        status: isSet(object.status)
          ? checkpointStatusFromJSON(object.status)
          : 0,
        statusDesc: isSet(object.statusDesc)
          ? globalThis.String(object.statusDesc)
          : "",
        blsAggrPk: isSet(object.blsAggrPk)
          ? bytesFromBase64(object.blsAggrPk)
          : new Uint8Array(0),
        powerSum: isSet(object.powerSum)
          ? globalThis.Number(object.powerSum)
          : 0,
        lifecycle: globalThis.Array.isArray(object?.lifecycle)
          ? object.lifecycle.map((e: any) =>
              CheckpointStateUpdateResponse.fromJSON(e),
            )
          : [],
      };
    },

    toJSON(message: RawCheckpointWithMetaResponse): unknown {
      const obj: any = {};
      if (message.ckpt !== undefined) {
        obj.ckpt = RawCheckpointResponse.toJSON(message.ckpt);
      }
      if (message.status !== 0) {
        obj.status = checkpointStatusToJSON(message.status);
      }
      if (message.statusDesc !== "") {
        obj.statusDesc = message.statusDesc;
      }
      if (message.blsAggrPk.length !== 0) {
        obj.blsAggrPk = base64FromBytes(message.blsAggrPk);
      }
      if (message.powerSum !== 0) {
        obj.powerSum = Math.round(message.powerSum);
      }
      if (message.lifecycle?.length) {
        obj.lifecycle = message.lifecycle.map((e) =>
          CheckpointStateUpdateResponse.toJSON(e),
        );
      }
      return obj;
    },

    create<I extends Exact<DeepPartial<RawCheckpointWithMetaResponse>, I>>(
      base?: I,
    ): RawCheckpointWithMetaResponse {
      return RawCheckpointWithMetaResponse.fromPartial(base ?? ({} as any));
    },
    fromPartial<I extends Exact<DeepPartial<RawCheckpointWithMetaResponse>, I>>(
      object: I,
    ): RawCheckpointWithMetaResponse {
      const message = createBaseRawCheckpointWithMetaResponse();
      message.ckpt =
        object.ckpt !== undefined && object.ckpt !== null
          ? RawCheckpointResponse.fromPartial(object.ckpt)
          : undefined;
      message.status = object.status ?? 0;
      message.statusDesc = object.statusDesc ?? "";
      message.blsAggrPk = object.blsAggrPk ?? new Uint8Array(0);
      message.powerSum = object.powerSum ?? 0;
      message.lifecycle =
        object.lifecycle?.map((e) =>
          CheckpointStateUpdateResponse.fromPartial(e),
        ) || [];
      return message;
    },
  };

/** Query defines the gRPC querier service. */
export interface Query {
  /** RawCheckpointList queries all checkpoints that match the given status. */
  RawCheckpointList(
    request: QueryRawCheckpointListRequest,
  ): Promise<QueryRawCheckpointListResponse>;
  /** RawCheckpoint queries a checkpoints at a given epoch number. */
  RawCheckpoint(
    request: QueryRawCheckpointRequest,
  ): Promise<QueryRawCheckpointResponse>;
  /** RawCheckpoints queries checkpoints for a epoch range specified in pagination params. */
  RawCheckpoints(
    request: QueryRawCheckpointsRequest,
  ): Promise<QueryRawCheckpointsResponse>;
  /**
   * BlsPublicKeyList queries a list of bls public keys of the validators at a
   * given epoch number.
   */
  BlsPublicKeyList(
    request: QueryBlsPublicKeyListRequest,
  ): Promise<QueryBlsPublicKeyListResponse>;
  /** EpochStatus queries the status of the checkpoint at a given epoch */
  EpochStatus(
    request: QueryEpochStatusRequest,
  ): Promise<QueryEpochStatusResponse>;
  /**
   * RecentEpochStatusCount queries the number of epochs with each status in
   * recent epochs
   */
  RecentEpochStatusCount(
    request: QueryRecentEpochStatusCountRequest,
  ): Promise<QueryRecentEpochStatusCountResponse>;
  /**
   * LastCheckpointWithStatus queries the last checkpoint with a given status or
   * a more matured status
   */
  LastCheckpointWithStatus(
    request: QueryLastCheckpointWithStatusRequest,
  ): Promise<QueryLastCheckpointWithStatusResponse>;
}

export const QueryServiceName = "babylon.checkpointing.v1.Query";
export class QueryClientImpl implements Query {
  private readonly rpc: Rpc;
  private readonly service: string;
  constructor(rpc: Rpc, opts?: { service?: string }) {
    this.service = opts?.service || QueryServiceName;
    this.rpc = rpc;
    this.RawCheckpointList = this.RawCheckpointList.bind(this);
    this.RawCheckpoint = this.RawCheckpoint.bind(this);
    this.RawCheckpoints = this.RawCheckpoints.bind(this);
    this.BlsPublicKeyList = this.BlsPublicKeyList.bind(this);
    this.EpochStatus = this.EpochStatus.bind(this);
    this.RecentEpochStatusCount = this.RecentEpochStatusCount.bind(this);
    this.LastCheckpointWithStatus = this.LastCheckpointWithStatus.bind(this);
  }
  RawCheckpointList(
    request: QueryRawCheckpointListRequest,
  ): Promise<QueryRawCheckpointListResponse> {
    const data = QueryRawCheckpointListRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RawCheckpointList", data);
    return promise.then((data) =>
      QueryRawCheckpointListResponse.decode(new BinaryReader(data)),
    );
  }

  RawCheckpoint(
    request: QueryRawCheckpointRequest,
  ): Promise<QueryRawCheckpointResponse> {
    const data = QueryRawCheckpointRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RawCheckpoint", data);
    return promise.then((data) =>
      QueryRawCheckpointResponse.decode(new BinaryReader(data)),
    );
  }

  RawCheckpoints(
    request: QueryRawCheckpointsRequest,
  ): Promise<QueryRawCheckpointsResponse> {
    const data = QueryRawCheckpointsRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "RawCheckpoints", data);
    return promise.then((data) =>
      QueryRawCheckpointsResponse.decode(new BinaryReader(data)),
    );
  }

  BlsPublicKeyList(
    request: QueryBlsPublicKeyListRequest,
  ): Promise<QueryBlsPublicKeyListResponse> {
    const data = QueryBlsPublicKeyListRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "BlsPublicKeyList", data);
    return promise.then((data) =>
      QueryBlsPublicKeyListResponse.decode(new BinaryReader(data)),
    );
  }

  EpochStatus(
    request: QueryEpochStatusRequest,
  ): Promise<QueryEpochStatusResponse> {
    const data = QueryEpochStatusRequest.encode(request).finish();
    const promise = this.rpc.request(this.service, "EpochStatus", data);
    return promise.then((data) =>
      QueryEpochStatusResponse.decode(new BinaryReader(data)),
    );
  }

  RecentEpochStatusCount(
    request: QueryRecentEpochStatusCountRequest,
  ): Promise<QueryRecentEpochStatusCountResponse> {
    const data = QueryRecentEpochStatusCountRequest.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "RecentEpochStatusCount",
      data,
    );
    return promise.then((data) =>
      QueryRecentEpochStatusCountResponse.decode(new BinaryReader(data)),
    );
  }

  LastCheckpointWithStatus(
    request: QueryLastCheckpointWithStatusRequest,
  ): Promise<QueryLastCheckpointWithStatusResponse> {
    const data = QueryLastCheckpointWithStatusRequest.encode(request).finish();
    const promise = this.rpc.request(
      this.service,
      "LastCheckpointWithStatus",
      data,
    );
    return promise.then((data) =>
      QueryLastCheckpointWithStatusResponse.decode(new BinaryReader(data)),
    );
  }
}

interface Rpc {
  request(
    service: string,
    method: string,
    data: Uint8Array,
  ): Promise<Uint8Array>;
}

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function toTimestamp(date: Date): Timestamp {
  const seconds = Math.trunc(date.getTime() / 1_000);
  const nanos = (date.getTime() % 1_000) * 1_000_000;
  return { seconds, nanos };
}

function fromTimestamp(t: Timestamp): Date {
  let millis = (t.seconds || 0) * 1_000;
  millis += (t.nanos || 0) / 1_000_000;
  return new globalThis.Date(millis);
}

function fromJsonTimestamp(o: any): Date {
  if (o instanceof globalThis.Date) {
    return o;
  } else if (typeof o === "string") {
    return new globalThis.Date(o);
  } else {
    return fromTimestamp(Timestamp.fromJSON(o));
  }
}

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isObject(value: any): boolean {
  return typeof value === "object" && value !== null;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
