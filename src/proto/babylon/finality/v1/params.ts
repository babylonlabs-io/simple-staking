// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/finality/v1/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import { Duration } from "../../../google/protobuf/duration";

export const protobufPackage = "babylon.finality.v1";

/** Params defines the parameters for the module. */
export interface Params {
  /** signed_blocks_window defines the size of the sliding window for tracking finality provider liveness */
  signedBlocksWindow: number;
  /**
   * finality_sig_timeout defines how much time (in terms of blocks) finality providers have to cast a finality
   * vote before being judged as missing their voting turn on the given block
   */
  finalitySigTimeout: number;
  /**
   * min_signed_per_window defines the minimum number of blocks that a finality provider is required to sign
   * within the sliding window to avoid being jailed
   */
  minSignedPerWindow: Uint8Array;
  /**
   * min_pub_rand is the minimum number of public randomness each
   * message should commit
   */
  minPubRand: number;
  /** jail_duration is the minimum period of time that a finality provider remains jailed */
  jailDuration: Duration | undefined;
}

function createBaseParams(): Params {
  return {
    signedBlocksWindow: 0,
    finalitySigTimeout: 0,
    minSignedPerWindow: new Uint8Array(0),
    minPubRand: 0,
    jailDuration: undefined,
  };
}

export const Params: MessageFns<Params> = {
  encode(
    message: Params,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.signedBlocksWindow !== 0) {
      writer.uint32(8).int64(message.signedBlocksWindow);
    }
    if (message.finalitySigTimeout !== 0) {
      writer.uint32(16).int64(message.finalitySigTimeout);
    }
    if (message.minSignedPerWindow.length !== 0) {
      writer.uint32(26).bytes(message.minSignedPerWindow);
    }
    if (message.minPubRand !== 0) {
      writer.uint32(32).uint64(message.minPubRand);
    }
    if (message.jailDuration !== undefined) {
      Duration.encode(message.jailDuration, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 8) {
            break;
          }

          message.signedBlocksWindow = longToNumber(reader.int64());
          continue;
        case 2:
          if (tag !== 16) {
            break;
          }

          message.finalitySigTimeout = longToNumber(reader.int64());
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.minSignedPerWindow = reader.bytes();
          continue;
        case 4:
          if (tag !== 32) {
            break;
          }

          message.minPubRand = longToNumber(reader.uint64());
          continue;
        case 5:
          if (tag !== 42) {
            break;
          }

          message.jailDuration = Duration.decode(reader, reader.uint32());
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      signedBlocksWindow: isSet(object.signedBlocksWindow)
        ? globalThis.Number(object.signedBlocksWindow)
        : 0,
      finalitySigTimeout: isSet(object.finalitySigTimeout)
        ? globalThis.Number(object.finalitySigTimeout)
        : 0,
      minSignedPerWindow: isSet(object.minSignedPerWindow)
        ? bytesFromBase64(object.minSignedPerWindow)
        : new Uint8Array(0),
      minPubRand: isSet(object.minPubRand)
        ? globalThis.Number(object.minPubRand)
        : 0,
      jailDuration: isSet(object.jailDuration)
        ? Duration.fromJSON(object.jailDuration)
        : undefined,
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.signedBlocksWindow !== 0) {
      obj.signedBlocksWindow = Math.round(message.signedBlocksWindow);
    }
    if (message.finalitySigTimeout !== 0) {
      obj.finalitySigTimeout = Math.round(message.finalitySigTimeout);
    }
    if (message.minSignedPerWindow.length !== 0) {
      obj.minSignedPerWindow = base64FromBytes(message.minSignedPerWindow);
    }
    if (message.minPubRand !== 0) {
      obj.minPubRand = Math.round(message.minPubRand);
    }
    if (message.jailDuration !== undefined) {
      obj.jailDuration = Duration.toJSON(message.jailDuration);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.signedBlocksWindow = object.signedBlocksWindow ?? 0;
    message.finalitySigTimeout = object.finalitySigTimeout ?? 0;
    message.minSignedPerWindow = object.minSignedPerWindow ?? new Uint8Array(0);
    message.minPubRand = object.minPubRand ?? 0;
    message.jailDuration =
      object.jailDuration !== undefined && object.jailDuration !== null
        ? Duration.fromPartial(object.jailDuration)
        : undefined;
    return message;
  },
};

function bytesFromBase64(b64: string): Uint8Array {
  if ((globalThis as any).Buffer) {
    return Uint8Array.from(globalThis.Buffer.from(b64, "base64"));
  } else {
    const bin = globalThis.atob(b64);
    const arr = new Uint8Array(bin.length);
    for (let i = 0; i < bin.length; ++i) {
      arr[i] = bin.charCodeAt(i);
    }
    return arr;
  }
}

function base64FromBytes(arr: Uint8Array): string {
  if ((globalThis as any).Buffer) {
    return globalThis.Buffer.from(arr).toString("base64");
  } else {
    const bin: string[] = [];
    arr.forEach((byte) => {
      bin.push(globalThis.String.fromCharCode(byte));
    });
    return globalThis.btoa(bin.join(""));
  }
}

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function longToNumber(int64: { toString(): string }): number {
  const num = globalThis.Number(int64.toString());
  if (num > globalThis.Number.MAX_SAFE_INTEGER) {
    throw new globalThis.Error("Value is larger than Number.MAX_SAFE_INTEGER");
  }
  if (num < globalThis.Number.MIN_SAFE_INTEGER) {
    throw new globalThis.Error("Value is smaller than Number.MIN_SAFE_INTEGER");
  }
  return num;
}

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
