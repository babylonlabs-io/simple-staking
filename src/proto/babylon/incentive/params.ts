// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.0
//   protoc               unknown
// source: babylon/incentive/params.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";

export const protobufPackage = "babylon.incentive";

/**
 * Params defines the parameters for the module, including portions of rewards
 * distributed to each type of stakeholder. Note that sum of the portions should
 * be strictly less than 1 so that the rest will go to Comet validators/delegations
 * adapted from https://github.com/cosmos/cosmos-sdk/blob/release/v0.47.x/proto/cosmos/distribution/v1beta1/distribution.proto
 */
export interface Params {
  /** submitter_portion is the portion of rewards that goes to submitter */
  submitterPortion: string;
  /** reporter_portion is the portion of rewards that goes to reporter */
  reporterPortion: string;
  /**
   * btc_staking_portion is the portion of rewards that goes to Finality Providers/delegations
   * NOTE: the portion of each Finality Provider/delegation is calculated by using its voting
   * power and finality provider's commission
   */
  btcStakingPortion: string;
}

function createBaseParams(): Params {
  return { submitterPortion: "", reporterPortion: "", btcStakingPortion: "" };
}

export const Params: MessageFns<Params> = {
  encode(
    message: Params,
    writer: BinaryWriter = new BinaryWriter(),
  ): BinaryWriter {
    if (message.submitterPortion !== "") {
      writer.uint32(10).string(message.submitterPortion);
    }
    if (message.reporterPortion !== "") {
      writer.uint32(18).string(message.reporterPortion);
    }
    if (message.btcStakingPortion !== "") {
      writer.uint32(26).string(message.btcStakingPortion);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Params {
    const reader =
      input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseParams();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1:
          if (tag !== 10) {
            break;
          }

          message.submitterPortion = reader.string();
          continue;
        case 2:
          if (tag !== 18) {
            break;
          }

          message.reporterPortion = reader.string();
          continue;
        case 3:
          if (tag !== 26) {
            break;
          }

          message.btcStakingPortion = reader.string();
          continue;
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Params {
    return {
      submitterPortion: isSet(object.submitterPortion)
        ? globalThis.String(object.submitterPortion)
        : "",
      reporterPortion: isSet(object.reporterPortion)
        ? globalThis.String(object.reporterPortion)
        : "",
      btcStakingPortion: isSet(object.btcStakingPortion)
        ? globalThis.String(object.btcStakingPortion)
        : "",
    };
  },

  toJSON(message: Params): unknown {
    const obj: any = {};
    if (message.submitterPortion !== "") {
      obj.submitterPortion = message.submitterPortion;
    }
    if (message.reporterPortion !== "") {
      obj.reporterPortion = message.reporterPortion;
    }
    if (message.btcStakingPortion !== "") {
      obj.btcStakingPortion = message.btcStakingPortion;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Params>, I>>(base?: I): Params {
    return Params.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Params>, I>>(object: I): Params {
    const message = createBaseParams();
    message.submitterPortion = object.submitterPortion ?? "";
    message.reporterPortion = object.reporterPortion ?? "";
    message.btcStakingPortion = object.btcStakingPortion ?? "";
    return message;
  },
};

type Builtin =
  | Date
  | Function
  | Uint8Array
  | string
  | number
  | boolean
  | undefined;

export type DeepPartial<T> = T extends Builtin
  ? T
  : T extends globalThis.Array<infer U>
    ? globalThis.Array<DeepPartial<U>>
    : T extends ReadonlyArray<infer U>
      ? ReadonlyArray<DeepPartial<U>>
      : T extends {}
        ? { [K in keyof T]?: DeepPartial<T[K]> }
        : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin
  ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & {
      [K in Exclude<keyof I, KeysOfUnion<P>>]: never;
    };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
